// 2: .nostromo.bootstrapper.run: 
// 3:                             push, rbp
rex(48)op(ff)modR/M(f5)
// 4:                             mov, rbp, rsp
rex(48)op(89)modR/M(e5)
// 5:                             mov, rsp, rbp
rex(48)op(89)modR/M(ec)
// 6:                             pop, rbp
rex(48)op(8f)modR/M(c5)
// 7:                             ret
op(c3)
// 10: .nostromo.bootstrapper.cctor: 
// 11:                               push, rbp
rex(48)op(ff)modR/M(f5)
// 12:                               mov, rbp, rsp
rex(48)op(89)modR/M(e5)
// 13:                               mov, rsp, rbp
rex(48)op(89)modR/M(ec)
// 14:                               pop, rbp
rex(48)op(8f)modR/M(c5)
// 15:                               ret
op(c3)
// 18: .nostromo.bootstrapper.cdtor: 
// 19:                               push, rbp
rex(48)op(ff)modR/M(f5)
// 20:                               mov, rbp, rsp
rex(48)op(89)modR/M(e5)
// 21:                               mov, rsp, rbp
rex(48)op(89)modR/M(ec)
// 22:                               pop, rbp
rex(48)op(8f)modR/M(c5)
// 23:                               ret
op(c3)
// 26: .nostromo.bootstrapper_vtbl_inst: 
// 27:                                   goto, .nostromo.bootstrapper.run
op(e9)co32(00-00-00-00)
// 30: .nostromo.bootstrapper_sctor: 
// 31:                               push, rbp                                           
rex(48)op(ff)modR/M(f5)
// 32:                               push, rbx                                           
rex(48)op(ff)modR/M(f3)
// 33:                               mov, rbp, rsp                                       
rex(48)op(89)modR/M(e5)
// 34:                               sub, rsp, 40                                        
rex(48)op(83)modR/M(ec)i8(28)
// 35:                               call, .sht.cons.program_sctor                       ; (call label)
op(e8)co32(00-00-00-00)
// 36:                               add, rsp, 40                                        
rex(48)op(81)modR/M(c4)i32(28-00-00-00)
// 37:                               lea, rbx, qwordptr .nostromo.bootstrapper_vtbl_inst 
rex(48)op(8d)modR/M(1d)disp32toLabel(00-00-00-00)
// 38:                               mov, [rcx], rbx                                     ; =
rex(48)op(89)modR/M(19)
// 39:                               sub, rsp, 40                                        
rex(48)op(83)modR/M(ec)i8(28)
// 40:                               call, .nostromo.bootstrapper.cctor                  ; (call label)
op(e8)co32(00-00-00-00)
// 41:                               add, rsp, 40                                        
rex(48)op(81)modR/M(c4)i32(28-00-00-00)
// 42:                               mov, rsp, rbp                                       
rex(48)op(89)modR/M(ec)
// 43:                               pop, rbx                                            
rex(48)op(8f)modR/M(c3)
// 44:                               pop, rbp                                            
rex(48)op(8f)modR/M(c5)
// 45:                               ret                                                 
op(c3)
// 48: .nostromo.bootstrapper_sdtor: 
// 49:                               push, rbp                                           
rex(48)op(ff)modR/M(f5)
// 50:                               push, rbx                                           
rex(48)op(ff)modR/M(f3)
// 51:                               mov, rbp, rsp                                       
rex(48)op(89)modR/M(e5)
// 52:                               lea, rbx, qwordptr .nostromo.bootstrapper_vtbl_inst 
rex(48)op(8d)modR/M(1d)disp32toLabel(00-00-00-00)
// 53:                               mov, [rcx], rbx                                     ; =
rex(48)op(89)modR/M(19)
// 54:                               sub, rsp, 40                                        
rex(48)op(83)modR/M(ec)i8(28)
// 55:                               call, .nostromo.bootstrapper.cdtor                  ; (call label)
op(e8)co32(00-00-00-00)
// 56:                               add, rsp, 40                                        
rex(48)op(81)modR/M(c4)i32(28-00-00-00)
// 57:                               sub, rsp, 40                                        
rex(48)op(83)modR/M(ec)i8(28)
// 58:                               call, .sht.cons.program_sdtor                       ; (call label)
op(e8)co32(00-00-00-00)
// 59:                               add, rsp, 40                                        
rex(48)op(81)modR/M(c4)i32(28-00-00-00)
// 60:                               mov, rsp, rbp                                       
rex(48)op(89)modR/M(ec)
// 61:                               pop, rbx                                            
rex(48)op(8f)modR/M(c3)
// 62:                               pop, rbp                                            
rex(48)op(8f)modR/M(c5)
// 63:                               ret                                                 
op(c3)
