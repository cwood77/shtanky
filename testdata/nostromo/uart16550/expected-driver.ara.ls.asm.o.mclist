// 2: .nostromo.uart16550.fakeBase.write8: 
// 3:                                      push, rbp
rex(48)op(ff)modR/M(f5)
// 4:                                      mov, rbp, rsp
rex(48)op(89)modR/M(e5)
// 5:                                      mov, rsp, rbp
rex(48)op(89)modR/M(ec)
// 6:                                      pop, rbp
rex(48)op(8f)modR/M(c5)
// 7:                                      ret
op(c3)
// 10: .nostromo.uart16550.fakeBase.cctor: 
// 11:                                     push, rbp
rex(48)op(ff)modR/M(f5)
// 12:                                     mov, rbp, rsp
rex(48)op(89)modR/M(e5)
// 13:                                     mov, rsp, rbp
rex(48)op(89)modR/M(ec)
// 14:                                     pop, rbp
rex(48)op(8f)modR/M(c5)
// 15:                                     ret
op(c3)
// 18: .nostromo.uart16550.fakeBase.cdtor: 
// 19:                                     push, rbp
rex(48)op(ff)modR/M(f5)
// 20:                                     mov, rbp, rsp
rex(48)op(89)modR/M(e5)
// 21:                                     mov, rsp, rbp
rex(48)op(89)modR/M(ec)
// 22:                                     pop, rbp
rex(48)op(8f)modR/M(c5)
// 23:                                     ret
op(c3)
// 26: .nostromo.uart16550.driver.write8: 
// 27:                                    push, rbp
rex(48)op(ff)modR/M(f5)
// 28:                                    mov, rbp, rsp
rex(48)op(89)modR/M(e5)
// 29:                                    mov, rsp, rbp
rex(48)op(89)modR/M(ec)
// 30:                                    pop, rbp
rex(48)op(8f)modR/M(c5)
// 31:                                    ret
op(c3)
// 34: .nostromo.uart16550.driver.cctor: 
// 35:                                   push, rbp
rex(48)op(ff)modR/M(f5)
// 36:                                   mov, rbp, rsp
rex(48)op(89)modR/M(e5)
// 37:                                   mov, rsp, rbp
rex(48)op(89)modR/M(ec)
// 38:                                   pop, rbp
rex(48)op(8f)modR/M(c5)
// 39:                                   ret
op(c3)
// 42: .nostromo.uart16550.driver.cdtor: 
// 43:                                   push, rbp
rex(48)op(ff)modR/M(f5)
// 44:                                   mov, rbp, rsp
rex(48)op(89)modR/M(e5)
// 45:                                   mov, rsp, rbp
rex(48)op(89)modR/M(ec)
// 46:                                   pop, rbp
rex(48)op(8f)modR/M(c5)
// 47:                                   ret
op(c3)
// 50: .nostromo.uart16550.driver_vtbl_inst: 
// 51:                                       goto, .nostromo.uart16550.driver.write8
op(e9)co32(00-00-00-00)
// 54: .nostromo.uart16550.fakeBase_vtbl_inst: 
// 55:                                         goto, .nostromo.uart16550.fakeBase.write8
op(e9)co32(00-00-00-00)
// 58: .nostromo.uart16550.driver_sctor: 
// 59:                                   push, rbp                                               
rex(48)op(ff)modR/M(f5)
// 60:                                   push, rbx                                               
rex(48)op(ff)modR/M(f3)
// 61:                                   mov, rbp, rsp                                           
rex(48)op(89)modR/M(e5)
// 62:                                   sub, rsp, 40                                            
rex(48)op(83)modR/M(ec)i8(28)
// 63:                                   call, .nostromo.uart16550.fakeBase_sctor                ; (call label)
op(e8)co32(00-00-00-00)
// 64:                                   add, rsp, 40                                            
rex(48)op(81)modR/M(c4)i32(28-00-00-00)
// 65:                                   lea, rbx, qwordptr .nostromo.uart16550.driver_vtbl_inst 
rex(48)op(8d)modR/M(1d)disp32toLabel(00-00-00-00)
// 66:                                   mov, [rcx], rbx                                         ; =
rex(48)op(89)modR/M(19)
// 67:                                   sub, rsp, 40                                            
rex(48)op(83)modR/M(ec)i8(28)
// 68:                                   call, .nostromo.uart16550.driver.cctor                  ; (call label)
op(e8)co32(00-00-00-00)
// 69:                                   add, rsp, 40                                            
rex(48)op(81)modR/M(c4)i32(28-00-00-00)
// 70:                                   mov, rsp, rbp                                           
rex(48)op(89)modR/M(ec)
// 71:                                   pop, rbx                                                
rex(48)op(8f)modR/M(c3)
// 72:                                   pop, rbp                                                
rex(48)op(8f)modR/M(c5)
// 73:                                   ret                                                     
op(c3)
// 76: .nostromo.uart16550.driver_sdtor: 
// 77:                                   push, rbp                                               
rex(48)op(ff)modR/M(f5)
// 78:                                   push, rbx                                               
rex(48)op(ff)modR/M(f3)
// 79:                                   mov, rbp, rsp                                           
rex(48)op(89)modR/M(e5)
// 80:                                   lea, rbx, qwordptr .nostromo.uart16550.driver_vtbl_inst 
rex(48)op(8d)modR/M(1d)disp32toLabel(00-00-00-00)
// 81:                                   mov, [rcx], rbx                                         ; =
rex(48)op(89)modR/M(19)
// 82:                                   sub, rsp, 40                                            
rex(48)op(83)modR/M(ec)i8(28)
// 83:                                   call, .nostromo.uart16550.driver.cdtor                  ; (call label)
op(e8)co32(00-00-00-00)
// 84:                                   add, rsp, 40                                            
rex(48)op(81)modR/M(c4)i32(28-00-00-00)
// 85:                                   sub, rsp, 40                                            
rex(48)op(83)modR/M(ec)i8(28)
// 86:                                   call, .nostromo.uart16550.fakeBase_sdtor                ; (call label)
op(e8)co32(00-00-00-00)
// 87:                                   add, rsp, 40                                            
rex(48)op(81)modR/M(c4)i32(28-00-00-00)
// 88:                                   mov, rsp, rbp                                           
rex(48)op(89)modR/M(ec)
// 89:                                   pop, rbx                                                
rex(48)op(8f)modR/M(c3)
// 90:                                   pop, rbp                                                
rex(48)op(8f)modR/M(c5)
// 91:                                   ret                                                     
op(c3)
// 94: .nostromo.uart16550.fakeBase_sctor: 
// 95:                                     push, rbp                                                 
rex(48)op(ff)modR/M(f5)
// 96:                                     push, rbx                                                 
rex(48)op(ff)modR/M(f3)
// 97:                                     mov, rbp, rsp                                             
rex(48)op(89)modR/M(e5)
// 98:                                     sub, rsp, 40                                              
rex(48)op(83)modR/M(ec)i8(28)
// 99:                                     call, .sht.core.object_sctor                              ; (call label)
op(e8)co32(00-00-00-00)
// 100:                                     add, rsp, 40                                              
rex(48)op(81)modR/M(c4)i32(28-00-00-00)
// 101:                                     lea, rbx, qwordptr .nostromo.uart16550.fakeBase_vtbl_inst 
rex(48)op(8d)modR/M(1d)disp32toLabel(00-00-00-00)
// 102:                                     mov, [rcx], rbx                                           ; =
rex(48)op(89)modR/M(19)
// 103:                                     sub, rsp, 40                                              
rex(48)op(83)modR/M(ec)i8(28)
// 104:                                     call, .nostromo.uart16550.fakeBase.cctor                  ; (call label)
op(e8)co32(00-00-00-00)
// 105:                                     add, rsp, 40                                              
rex(48)op(81)modR/M(c4)i32(28-00-00-00)
// 106:                                     mov, rsp, rbp                                             
rex(48)op(89)modR/M(ec)
// 107:                                     pop, rbx                                                  
rex(48)op(8f)modR/M(c3)
// 108:                                     pop, rbp                                                  
rex(48)op(8f)modR/M(c5)
// 109:                                     ret                                                       
op(c3)
// 112: .nostromo.uart16550.fakeBase_sdtor: 
// 113:                                     push, rbp                                                 
rex(48)op(ff)modR/M(f5)
// 114:                                     push, rbx                                                 
rex(48)op(ff)modR/M(f3)
// 115:                                     mov, rbp, rsp                                             
rex(48)op(89)modR/M(e5)
// 116:                                     lea, rbx, qwordptr .nostromo.uart16550.fakeBase_vtbl_inst 
rex(48)op(8d)modR/M(1d)disp32toLabel(00-00-00-00)
// 117:                                     mov, [rcx], rbx                                           ; =
rex(48)op(89)modR/M(19)
// 118:                                     sub, rsp, 40                                              
rex(48)op(83)modR/M(ec)i8(28)
// 119:                                     call, .nostromo.uart16550.fakeBase.cdtor                  ; (call label)
op(e8)co32(00-00-00-00)
// 120:                                     add, rsp, 40                                              
rex(48)op(81)modR/M(c4)i32(28-00-00-00)
// 121:                                     sub, rsp, 40                                              
rex(48)op(83)modR/M(ec)i8(28)
// 122:                                     call, .sht.core.object_sdtor                              ; (call label)
op(e8)co32(00-00-00-00)
// 123:                                     add, rsp, 40                                              
rex(48)op(81)modR/M(c4)i32(28-00-00-00)
// 124:                                     mov, rsp, rbp                                             
rex(48)op(89)modR/M(ec)
// 125:                                     pop, rbx                                                  
rex(48)op(8f)modR/M(c3)
// 126:                                     pop, rbp                                                  
rex(48)op(8f)modR/M(c5)
// 127:                                     ret                                                       
op(c3)
