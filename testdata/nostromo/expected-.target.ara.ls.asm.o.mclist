// 2: .entrypoint: 
// 3:              push, rbp                          
rex(48)op(ff)modR/M(f5)
// 4:              push, rbx                          
rex(48)op(ff)modR/M(f3)
// 5:              push, rdi                          
rex(48)op(ff)modR/M(f7)
// 6:              mov, rbp, rsp                      
rex(48)op(89)modR/M(e5)
// 7:              sub, rsp, 24                       
rex(48)op(83)modR/M(ec)i8(18)
// 8:              sub, rsp, 8                        
rex(48)op(83)modR/M(ec)i8(08)
// 9:              sub, rsp, 32                       
rex(48)op(83)modR/M(ec)i8(20)
// 10:              mov, rbx, rcx                      ; (preserve) [combiner]
rex(48)op(89)modR/M(cb)
// 11:              mov, rcx, [rbp-8]                  ;       (cout req for rcx) [splitter]
rex(48)op(8b)modR/M(4d)d8(f8)
// 12:              call, .sht.cons.stdout_sctor       ; (call label)
op(e8)co32(00-00-00-00)
// 13:              add, rsp, 32                       
rex(48)op(83)modR/M(c4)i8(20)
// 14:              sub, rsp, 16                       
rex(48)op(83)modR/M(ec)i8(10)
// 15:              sub, rsp, 32                       
rex(48)op(83)modR/M(ec)i8(20)
// 16:              mov, rdi, rcx                      ; (preserve) [combiner]
rex(48)op(89)modR/M(cf)
// 17:              mov, rcx, [rbp-8]                  ;       (obj0 req for rcx) [splitter]
rex(48)op(8b)modR/M(4d)d8(f8)
// 18:              call, .nostromo.bootstrapper_sctor ; (call label)
op(e8)co32(00-00-00-00)
// 19:              add, rsp, 32                       
rex(48)op(83)modR/M(c4)i8(20)
// 20:              mov, [rcx+8], rdi                  ; =
rex(48)op(89)modR/M(79)d8(08)
// 21:              sub, rsp, 32                       
rex(48)op(83)modR/M(ec)i8(20)
// 22:              mov, rbx, [rcx]                    ; fieldaccess: owner of run
rex(48)op(8b)modR/M(19)
// 23:              mov, rdx, rbx                      ;       (args req for rdx) [splitter]
rex(48)op(89)modR/M(da)
// 24:              call, [rbx]                        ; (call ptr)
rex(48)op(ff)modR/M(13)
// 25:              add, rsp, 32                       
rex(48)op(83)modR/M(c4)i8(20)
// 26:              sub, rsp, 32                       
rex(48)op(83)modR/M(ec)i8(20)
// 27:              call, .nostromo.bootstrapper_sdtor ; (call label)
op(e8)co32(00-00-00-00)
// 28:              add, rsp, 32                       
rex(48)op(83)modR/M(c4)i8(20)
// 29:              sub, rsp, 32                       
rex(48)op(83)modR/M(ec)i8(20)
// 30:              mov, rbx, rcx                      ; (preserve) [combiner]
rex(48)op(89)modR/M(cb)
// 31:              mov, rcx, rdi                      ; (restore [combiner])
rex(48)op(89)modR/M(f9)
// 32:              call, .sht.cons.stdout_sdtor       ; (call label)
op(e8)co32(00-00-00-00)
// 33:              add, rsp, 32                       
rex(48)op(83)modR/M(c4)i8(20)
// 34:              add, rsp, 16                       
rex(48)op(83)modR/M(c4)i8(10)
// 35:              add, rsp, 8                        
rex(48)op(83)modR/M(c4)i8(08)
// 36:              mov, rsp, rbp                      
rex(48)op(89)modR/M(ec)
// 37:              pop, rdi                           
rex(48)op(8f)modR/M(c7)
// 38:              pop, rbx                           
rex(48)op(8f)modR/M(c3)
// 39:              pop, rbp                           
rex(48)op(8f)modR/M(c5)
// 40:              ret                                
op(c3)
// 43: .nostromo.consoleTarget.cctor: 
// 44:                                push, rbp
rex(48)op(ff)modR/M(f5)
// 45:                                mov, rbp, rsp
rex(48)op(89)modR/M(e5)
// 46:                                mov, rsp, rbp
rex(48)op(89)modR/M(ec)
// 47:                                pop, rbp
rex(48)op(8f)modR/M(c5)
// 48:                                ret
op(c3)
// 51: .nostromo.consoleTarget.cdtor: 
// 52:                                push, rbp
rex(48)op(ff)modR/M(f5)
// 53:                                mov, rbp, rsp
rex(48)op(89)modR/M(e5)
// 54:                                mov, rsp, rbp
rex(48)op(89)modR/M(ec)
// 55:                                pop, rbp
rex(48)op(8f)modR/M(c5)
// 56:                                ret
op(c3)
// 59: .nostromo.consoleTarget_vtbl_inst:
// 60: .data, 
// 63: .nostromo.consoleTarget_sctor: 
// 64:                                push, rbp                                            
rex(48)op(ff)modR/M(f5)
// 65:                                mov, rbp, rsp                                        
rex(48)op(89)modR/M(e5)
// 66:                                sub, rsp, 32                                         
rex(48)op(83)modR/M(ec)i8(20)
// 67:                                call, .sht.core.object_sctor                         ; (call label)
op(e8)co32(00-00-00-00)
// 68:                                add, rsp, 32                                         
rex(48)op(83)modR/M(c4)i8(20)
// 69:                                push, r10                                            ; codeshape spill
rex(49)op(ff)modR/M(f2)
// 70:                                mov, r10, qwordptr .nostromo.consoleTarget_vtbl_inst ; codeshape decomp
rex(4c)op(8b)modR/M(15)disp32toLabel(00-00-00-00)
// 71:                                mov, [rcx], r10                                      ; =
rex(4c)op(89)modR/M(11)
// 72:                                pop, r10                                             ; codeshape restore
rex(49)op(8f)modR/M(c2)
// 73:                                sub, rsp, 32                                         
rex(48)op(83)modR/M(ec)i8(20)
// 74:                                call, .nostromo.consoleTarget.cctor                  ; (call label)
op(e8)co32(00-00-00-00)
// 75:                                add, rsp, 32                                         
rex(48)op(83)modR/M(c4)i8(20)
// 76:                                mov, rsp, rbp                                        
rex(48)op(89)modR/M(ec)
// 77:                                pop, rbp                                             
rex(48)op(8f)modR/M(c5)
// 78:                                ret                                                  
op(c3)
// 81: .nostromo.consoleTarget_sdtor: 
// 82:                                push, rbp                                            
rex(48)op(ff)modR/M(f5)
// 83:                                mov, rbp, rsp                                        
rex(48)op(89)modR/M(e5)
// 84:                                push, r10                                            ; codeshape spill
rex(49)op(ff)modR/M(f2)
// 85:                                mov, r10, qwordptr .nostromo.consoleTarget_vtbl_inst ; codeshape decomp
rex(4c)op(8b)modR/M(15)disp32toLabel(00-00-00-00)
// 86:                                mov, [rcx], r10                                      ; =
rex(4c)op(89)modR/M(11)
// 87:                                pop, r10                                             ; codeshape restore
rex(49)op(8f)modR/M(c2)
// 88:                                sub, rsp, 32                                         
rex(48)op(83)modR/M(ec)i8(20)
// 89:                                call, .nostromo.consoleTarget.cdtor                  ; (call label)
op(e8)co32(00-00-00-00)
// 90:                                add, rsp, 32                                         
rex(48)op(83)modR/M(c4)i8(20)
// 91:                                sub, rsp, 32                                         
rex(48)op(83)modR/M(ec)i8(20)
// 92:                                call, .sht.core.object_sdtor                         ; (call label)
op(e8)co32(00-00-00-00)
// 93:                                add, rsp, 32                                         
rex(48)op(83)modR/M(c4)i8(20)
// 94:                                mov, rsp, rbp                                        
rex(48)op(89)modR/M(ec)
// 95:                                pop, rbp                                             
rex(48)op(8f)modR/M(c5)
// 96:                                ret                                                  
op(c3)
