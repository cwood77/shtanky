=== LIR bundle has 18 objects(s) ===   (hint: $=var, ~=temp, @=immediate)

----- start stream .sht.cons.iStream.printLn
10 <selectSegment> @code/0                  
20 <enterFunc>     ~rval/0, $self/0, $msg/0 ;;; .sht.cons.iStream.printLn
30 <exitFunc>      

----- start stream .sht.cons.iStream.cctor
10 <selectSegment> @code/0            
20 <enterFunc>     ~rval0/0, $self0/0 ;;; .sht.cons.iStream.cctor
30 <exitFunc>      

----- start stream .sht.cons.iStream.cdtor
10 <selectSegment> @code/0            
20 <enterFunc>     ~rval1/0, $self1/0 ;;; .sht.cons.iStream.cdtor
30 <exitFunc>      

----- start stream .sht.cons.stdout.printLn
10 <selectSegment> @code/0                            
20 <enterFunc>     ~rval2/0, $self2/0, $msg0/0        ;;; .sht.cons.stdout.printLn
30 <precall>       @totalStackSize/32                 
40 mov             ~/0, @1/0                          ;;; shape:hoist imm from call
50 call            ~rval3/0, @._osCall/0, ~/0, $msg/0 ;;; (call label)
60 <postcall>      @totalStackSize/32                 
70 <exitFunc>      

----- start stream .sht.cons.stdout.cctor
10 <selectSegment> @code/0            
20 <enterFunc>     ~rval4/0, $self3/0 ;;; .sht.cons.stdout.cctor
30 <exitFunc>      

----- start stream .sht.cons.stdout.cdtor
10 <selectSegment> @code/0            
20 <enterFunc>     ~rval5/0, $self4/0 ;;; .sht.cons.stdout.cdtor
30 <exitFunc>      

----- start stream .sht.cons.program.run
10 <selectSegment> @code/0                     
20 <enterFunc>     ~rval6/0, $self5/0, $args/0 ;;; .sht.cons.program.run
30 <exitFunc>      

----- start stream .sht.cons.program.cctor
10 <selectSegment> @code/0            
20 <enterFunc>     ~rval7/0, $self6/0 ;;; .sht.cons.program.cctor
30 <exitFunc>      

----- start stream .sht.cons.program.cdtor
10 <selectSegment> @code/0            
20 <enterFunc>     ~rval8/0, $self7/0 ;;; .sht.cons.program.cdtor
30 <exitFunc>      

----- start stream .sht.cons.iStream_vtbl_inst
10 <selectSegment>   @const/0                      
20 <globalConstData> @.sht.cons.iStream.printLn /0 ;;; .sht.cons.iStream_vtbl_inst

----- start stream .sht.cons.program_vtbl_inst
10 <selectSegment>   @const/0                  
20 <globalConstData> @.sht.cons.program.run /0 ;;; .sht.cons.program_vtbl_inst

----- start stream .sht.cons.stdout_vtbl_inst
10 <selectSegment>   @const/0                     
20 <globalConstData> @.sht.cons.stdout.printLn /0 ;;; .sht.cons.stdout_vtbl_inst

----- start stream .sht.cons.iStream_sctor
10  <selectSegment> @code/0                                        
20  <enterFunc>     ~rval9/0, $self8/0                             ;;; .sht.cons.iStream_sctor
30  <precall>       @totalStackSize/32                             
40  call            ~rval10/0, @.sht.core.object_sctor/0, $self/0  ;;; (call label)
50  <postcall>      @totalStackSize/32                             
60  mov             [~self]/0, @.sht.cons.iStream_vtbl_inst/0      ;;; =
70  <precall>       @totalStackSize/32                             
80  call            ~rval11/0, @.sht.cons.iStream.cctor/0, $self/0 ;;; (call label)
90  <postcall>      @totalStackSize/32                             
100 <exitFunc>      

----- start stream .sht.cons.iStream_sdtor
10  <selectSegment> @code/0                                        
20  <enterFunc>     ~rval12/0, $self9/0                            ;;; .sht.cons.iStream_sdtor
30  mov             [~self]/0, @.sht.cons.iStream_vtbl_inst/0      ;;; =
40  <precall>       @totalStackSize/32                             
50  call            ~rval13/0, @.sht.cons.iStream.cdtor/0, $self/0 ;;; (call label)
60  <postcall>      @totalStackSize/32                             
70  <precall>       @totalStackSize/32                             
80  call            ~rval14/0, @.sht.core.object_sdtor/0, $self/0  ;;; (call label)
90  <postcall>      @totalStackSize/32                             
100 <exitFunc>      

----- start stream .sht.cons.program_sctor
10  <selectSegment> @code/0                                        
20  <enterFunc>     ~rval15/0, $self10/0                           ;;; .sht.cons.program_sctor
30  <precall>       @totalStackSize/32                             
40  call            ~rval16/0, @.sht.core.object_sctor/0, $self/0  ;;; (call label)
50  <postcall>      @totalStackSize/32                             
60  mov             [~self]/0, @.sht.cons.program_vtbl_inst/0      ;;; =
70  <precall>       @totalStackSize/32                             
80  call            ~rval17/0, @.sht.cons.program.cctor/0, $self/0 ;;; (call label)
90  <postcall>      @totalStackSize/32                             
100 <exitFunc>      

----- start stream .sht.cons.program_sdtor
10  <selectSegment> @code/0                                        
20  <enterFunc>     ~rval18/0, $self11/0                           ;;; .sht.cons.program_sdtor
30  mov             [~self]/0, @.sht.cons.program_vtbl_inst/0      ;;; =
40  <precall>       @totalStackSize/32                             
50  call            ~rval19/0, @.sht.cons.program.cdtor/0, $self/0 ;;; (call label)
60  <postcall>      @totalStackSize/32                             
70  <precall>       @totalStackSize/32                             
80  call            ~rval20/0, @.sht.core.object_sdtor/0, $self/0  ;;; (call label)
90  <postcall>      @totalStackSize/32                             
100 <exitFunc>      

----- start stream .sht.cons.stdout_sctor
10  <selectSegment> @code/0                                        
20  <enterFunc>     ~rval21/0, $self12/0                           ;;; .sht.cons.stdout_sctor
30  <precall>       @totalStackSize/32                             
40  call            ~rval22/0, @.sht.cons.iStream_sctor/0, $self/0 ;;; (call label)
50  <postcall>      @totalStackSize/32                             
60  mov             [~self]/0, @.sht.cons.stdout_vtbl_inst/0       ;;; =
70  <precall>       @totalStackSize/32                             
80  call            ~rval23/0, @.sht.cons.stdout.cctor/0, $self/0  ;;; (call label)
90  <postcall>      @totalStackSize/32                             
100 <exitFunc>      

----- start stream .sht.cons.stdout_sdtor
10  <selectSegment> @code/0                                        
20  <enterFunc>     ~rval24/0, $self13/0                           ;;; .sht.cons.stdout_sdtor
30  mov             [~self]/0, @.sht.cons.stdout_vtbl_inst/0       ;;; =
40  <precall>       @totalStackSize/32                             
50  call            ~rval25/0, @.sht.cons.stdout.cdtor/0, $self/0  ;;; (call label)
60  <postcall>      @totalStackSize/32                             
70  <precall>       @totalStackSize/32                             
80  call            ~rval26/0, @.sht.cons.iStream_sdtor/0, $self/0 ;;; (call label)
90  <postcall>      @totalStackSize/32                             
100 <exitFunc>      

=== end of LIR bundle dump ===

~~~ some debugging hints for this target ~~~

pref order              rbx rdi rsi r12 r13 r14 r15 rax rcx rdx r8 r9 r10 r11
passing order           -   -   -   -   -   -   -   0   1   2   3  4  -   -
saved in Prolog or Call P   P   P   P   P   P   P   C   C   C   C  C  C   C
as int                  24  30  29  35  36  37  38  23  25  26  31 32 33  34

reg rax rbx rcx rdx rbp rsp rsi rdi r8 r9 r10 r11 r12 r13 r14 r15
    23  24  25  26  27  28  29  30  31 32 33  34  35  36  37  38

cc shadow space = 32
