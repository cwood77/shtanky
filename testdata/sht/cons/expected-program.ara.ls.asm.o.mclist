// 2: .sht.cons.iStream.printLn: 
// 3:                            push, rbp
rex(48)op(ff)modR/M(f5)
// 4:                            mov, rbp, rsp
rex(48)op(89)modR/M(e5)
// 5:                            mov, rsp, rbp
rex(48)op(89)modR/M(ec)
// 6:                            pop, rbp
rex(48)op(8f)modR/M(c5)
// 7:                            ret
op(c3)
// 10: .sht.cons.iStream.cctor: 
// 11:                          push, rbp
rex(48)op(ff)modR/M(f5)
// 12:                          mov, rbp, rsp
rex(48)op(89)modR/M(e5)
// 13:                          mov, rsp, rbp
rex(48)op(89)modR/M(ec)
// 14:                          pop, rbp
rex(48)op(8f)modR/M(c5)
// 15:                          ret
op(c3)
// 18: .sht.cons.iStream.cdtor: 
// 19:                          push, rbp
rex(48)op(ff)modR/M(f5)
// 20:                          mov, rbp, rsp
rex(48)op(89)modR/M(e5)
// 21:                          mov, rsp, rbp
rex(48)op(89)modR/M(ec)
// 22:                          pop, rbp
rex(48)op(8f)modR/M(c5)
// 23:                          ret
op(c3)
// 26: .sht.cons.stdout.printLn: 
// 27:                           push, rbp     
rex(48)op(ff)modR/M(f5)
// 28:                           mov, rbp, rsp 
rex(48)op(89)modR/M(e5)
// 29:                           sub, rsp, 32  ; 32 = (passing size)32 + (align pad)0
rex(48)op(83)modR/M(ec)i8(20)
// 30:                           mov, rcx, rdx ;       (msg req for rcx) [splitter]
rex(48)op(89)modR/M(d1)
// 31:                           call, ._print ; (call label)
op(e8)co32(00-00-00-00)
// 32:                           add, rsp, 32  ; 32 = (passing size)32 + (align pad)0
rex(48)op(81)modR/M(c4)i32(20-00-00-00)
// 33:                           mov, rsp, rbp 
rex(48)op(89)modR/M(ec)
// 34:                           pop, rbp      
rex(48)op(8f)modR/M(c5)
// 35:                           ret           
op(c3)
// 38: .sht.cons.stdout.cctor: 
// 39:                         push, rbp
rex(48)op(ff)modR/M(f5)
// 40:                         mov, rbp, rsp
rex(48)op(89)modR/M(e5)
// 41:                         mov, rsp, rbp
rex(48)op(89)modR/M(ec)
// 42:                         pop, rbp
rex(48)op(8f)modR/M(c5)
// 43:                         ret
op(c3)
// 46: .sht.cons.stdout.cdtor: 
// 47:                         push, rbp
rex(48)op(ff)modR/M(f5)
// 48:                         mov, rbp, rsp
rex(48)op(89)modR/M(e5)
// 49:                         mov, rsp, rbp
rex(48)op(89)modR/M(ec)
// 50:                         pop, rbp
rex(48)op(8f)modR/M(c5)
// 51:                         ret
op(c3)
// 54: .sht.cons.program.run: 
// 55:                        push, rbp
rex(48)op(ff)modR/M(f5)
// 56:                        mov, rbp, rsp
rex(48)op(89)modR/M(e5)
// 57:                        mov, rsp, rbp
rex(48)op(89)modR/M(ec)
// 58:                        pop, rbp
rex(48)op(8f)modR/M(c5)
// 59:                        ret
op(c3)
// 62: .sht.cons.program.cctor: 
// 63:                          push, rbp
rex(48)op(ff)modR/M(f5)
// 64:                          mov, rbp, rsp
rex(48)op(89)modR/M(e5)
// 65:                          mov, rsp, rbp
rex(48)op(89)modR/M(ec)
// 66:                          pop, rbp
rex(48)op(8f)modR/M(c5)
// 67:                          ret
op(c3)
// 70: .sht.cons.program.cdtor: 
// 71:                          push, rbp
rex(48)op(ff)modR/M(f5)
// 72:                          mov, rbp, rsp
rex(48)op(89)modR/M(e5)
// 73:                          mov, rsp, rbp
rex(48)op(89)modR/M(ec)
// 74:                          pop, rbp
rex(48)op(8f)modR/M(c5)
// 75:                          ret
op(c3)
// 78: .sht.cons.iStream_vtbl_inst: 
// 79:                              goto, .sht.cons.iStream.printLn
op(e9)co32(00-00-00-00)
// 82: .sht.cons.program_vtbl_inst: 
// 83:                              goto, .sht.cons.program.run
op(e9)co32(00-00-00-00)
// 86: .sht.cons.stdout_vtbl_inst: 
// 87:                             goto, .sht.cons.stdout.printLn
op(e9)co32(00-00-00-00)
// 90: .sht.cons.iStream_sctor: 
// 91:                          push, rbp                                      
rex(48)op(ff)modR/M(f5)
// 92:                          push, rbx                                      
rex(48)op(ff)modR/M(f3)
// 93:                          mov, rbp, rsp                                  
rex(48)op(89)modR/M(e5)
// 94:                          sub, rsp, 40                                   ; 40 = (passing size)32 + (align pad)8
rex(48)op(83)modR/M(ec)i8(28)
// 95:                          call, .sht.core.object_sctor                   ; (call label)
op(e8)co32(00-00-00-00)
// 96:                          add, rsp, 40                                   ; 40 = (passing size)32 + (align pad)8
rex(48)op(81)modR/M(c4)i32(28-00-00-00)
// 97:                          lea, rbx, qwordptr .sht.cons.iStream_vtbl_inst 
rex(48)op(8d)modR/M(1d)disp32toLabel(00-00-00-00)
// 98:                          mov, [rcx], rbx                                ; =
rex(48)op(89)modR/M(19)
// 99:                          sub, rsp, 40                                   ; 40 = (passing size)32 + (align pad)8
rex(48)op(83)modR/M(ec)i8(28)
// 100:                          call, .sht.cons.iStream.cctor                  ; (call label)
op(e8)co32(00-00-00-00)
// 101:                          add, rsp, 40                                   ; 40 = (passing size)32 + (align pad)8
rex(48)op(81)modR/M(c4)i32(28-00-00-00)
// 102:                          mov, rsp, rbp                                  
rex(48)op(89)modR/M(ec)
// 103:                          pop, rbx                                       
rex(48)op(8f)modR/M(c3)
// 104:                          pop, rbp                                       
rex(48)op(8f)modR/M(c5)
// 105:                          ret                                            
op(c3)
// 108: .sht.cons.iStream_sdtor: 
// 109:                          push, rbp                                      
rex(48)op(ff)modR/M(f5)
// 110:                          push, rbx                                      
rex(48)op(ff)modR/M(f3)
// 111:                          mov, rbp, rsp                                  
rex(48)op(89)modR/M(e5)
// 112:                          lea, rbx, qwordptr .sht.cons.iStream_vtbl_inst 
rex(48)op(8d)modR/M(1d)disp32toLabel(00-00-00-00)
// 113:                          mov, [rcx], rbx                                ; =
rex(48)op(89)modR/M(19)
// 114:                          sub, rsp, 40                                   ; 40 = (passing size)32 + (align pad)8
rex(48)op(83)modR/M(ec)i8(28)
// 115:                          call, .sht.cons.iStream.cdtor                  ; (call label)
op(e8)co32(00-00-00-00)
// 116:                          add, rsp, 40                                   ; 40 = (passing size)32 + (align pad)8
rex(48)op(81)modR/M(c4)i32(28-00-00-00)
// 117:                          sub, rsp, 40                                   ; 40 = (passing size)32 + (align pad)8
rex(48)op(83)modR/M(ec)i8(28)
// 118:                          call, .sht.core.object_sdtor                   ; (call label)
op(e8)co32(00-00-00-00)
// 119:                          add, rsp, 40                                   ; 40 = (passing size)32 + (align pad)8
rex(48)op(81)modR/M(c4)i32(28-00-00-00)
// 120:                          mov, rsp, rbp                                  
rex(48)op(89)modR/M(ec)
// 121:                          pop, rbx                                       
rex(48)op(8f)modR/M(c3)
// 122:                          pop, rbp                                       
rex(48)op(8f)modR/M(c5)
// 123:                          ret                                            
op(c3)
// 126: .sht.cons.program_sctor: 
// 127:                          push, rbp                                      
rex(48)op(ff)modR/M(f5)
// 128:                          push, rbx                                      
rex(48)op(ff)modR/M(f3)
// 129:                          mov, rbp, rsp                                  
rex(48)op(89)modR/M(e5)
// 130:                          sub, rsp, 40                                   ; 40 = (passing size)32 + (align pad)8
rex(48)op(83)modR/M(ec)i8(28)
// 131:                          call, .sht.core.object_sctor                   ; (call label)
op(e8)co32(00-00-00-00)
// 132:                          add, rsp, 40                                   ; 40 = (passing size)32 + (align pad)8
rex(48)op(81)modR/M(c4)i32(28-00-00-00)
// 133:                          lea, rbx, qwordptr .sht.cons.program_vtbl_inst 
rex(48)op(8d)modR/M(1d)disp32toLabel(00-00-00-00)
// 134:                          mov, [rcx], rbx                                ; =
rex(48)op(89)modR/M(19)
// 135:                          sub, rsp, 40                                   ; 40 = (passing size)32 + (align pad)8
rex(48)op(83)modR/M(ec)i8(28)
// 136:                          call, .sht.cons.program.cctor                  ; (call label)
op(e8)co32(00-00-00-00)
// 137:                          add, rsp, 40                                   ; 40 = (passing size)32 + (align pad)8
rex(48)op(81)modR/M(c4)i32(28-00-00-00)
// 138:                          mov, rsp, rbp                                  
rex(48)op(89)modR/M(ec)
// 139:                          pop, rbx                                       
rex(48)op(8f)modR/M(c3)
// 140:                          pop, rbp                                       
rex(48)op(8f)modR/M(c5)
// 141:                          ret                                            
op(c3)
// 144: .sht.cons.program_sdtor: 
// 145:                          push, rbp                                      
rex(48)op(ff)modR/M(f5)
// 146:                          push, rbx                                      
rex(48)op(ff)modR/M(f3)
// 147:                          mov, rbp, rsp                                  
rex(48)op(89)modR/M(e5)
// 148:                          lea, rbx, qwordptr .sht.cons.program_vtbl_inst 
rex(48)op(8d)modR/M(1d)disp32toLabel(00-00-00-00)
// 149:                          mov, [rcx], rbx                                ; =
rex(48)op(89)modR/M(19)
// 150:                          sub, rsp, 40                                   ; 40 = (passing size)32 + (align pad)8
rex(48)op(83)modR/M(ec)i8(28)
// 151:                          call, .sht.cons.program.cdtor                  ; (call label)
op(e8)co32(00-00-00-00)
// 152:                          add, rsp, 40                                   ; 40 = (passing size)32 + (align pad)8
rex(48)op(81)modR/M(c4)i32(28-00-00-00)
// 153:                          sub, rsp, 40                                   ; 40 = (passing size)32 + (align pad)8
rex(48)op(83)modR/M(ec)i8(28)
// 154:                          call, .sht.core.object_sdtor                   ; (call label)
op(e8)co32(00-00-00-00)
// 155:                          add, rsp, 40                                   ; 40 = (passing size)32 + (align pad)8
rex(48)op(81)modR/M(c4)i32(28-00-00-00)
// 156:                          mov, rsp, rbp                                  
rex(48)op(89)modR/M(ec)
// 157:                          pop, rbx                                       
rex(48)op(8f)modR/M(c3)
// 158:                          pop, rbp                                       
rex(48)op(8f)modR/M(c5)
// 159:                          ret                                            
op(c3)
// 162: .sht.cons.stdout_sctor: 
// 163:                         push, rbp                                     
rex(48)op(ff)modR/M(f5)
// 164:                         push, rbx                                     
rex(48)op(ff)modR/M(f3)
// 165:                         mov, rbp, rsp                                 
rex(48)op(89)modR/M(e5)
// 166:                         sub, rsp, 40                                  ; 40 = (passing size)32 + (align pad)8
rex(48)op(83)modR/M(ec)i8(28)
// 167:                         call, .sht.cons.iStream_sctor                 ; (call label)
op(e8)co32(00-00-00-00)
// 168:                         add, rsp, 40                                  ; 40 = (passing size)32 + (align pad)8
rex(48)op(81)modR/M(c4)i32(28-00-00-00)
// 169:                         lea, rbx, qwordptr .sht.cons.stdout_vtbl_inst 
rex(48)op(8d)modR/M(1d)disp32toLabel(00-00-00-00)
// 170:                         mov, [rcx], rbx                               ; =
rex(48)op(89)modR/M(19)
// 171:                         sub, rsp, 40                                  ; 40 = (passing size)32 + (align pad)8
rex(48)op(83)modR/M(ec)i8(28)
// 172:                         call, .sht.cons.stdout.cctor                  ; (call label)
op(e8)co32(00-00-00-00)
// 173:                         add, rsp, 40                                  ; 40 = (passing size)32 + (align pad)8
rex(48)op(81)modR/M(c4)i32(28-00-00-00)
// 174:                         mov, rsp, rbp                                 
rex(48)op(89)modR/M(ec)
// 175:                         pop, rbx                                      
rex(48)op(8f)modR/M(c3)
// 176:                         pop, rbp                                      
rex(48)op(8f)modR/M(c5)
// 177:                         ret                                           
op(c3)
// 180: .sht.cons.stdout_sdtor: 
// 181:                         push, rbp                                     
rex(48)op(ff)modR/M(f5)
// 182:                         push, rbx                                     
rex(48)op(ff)modR/M(f3)
// 183:                         mov, rbp, rsp                                 
rex(48)op(89)modR/M(e5)
// 184:                         lea, rbx, qwordptr .sht.cons.stdout_vtbl_inst 
rex(48)op(8d)modR/M(1d)disp32toLabel(00-00-00-00)
// 185:                         mov, [rcx], rbx                               ; =
rex(48)op(89)modR/M(19)
// 186:                         sub, rsp, 40                                  ; 40 = (passing size)32 + (align pad)8
rex(48)op(83)modR/M(ec)i8(28)
// 187:                         call, .sht.cons.stdout.cdtor                  ; (call label)
op(e8)co32(00-00-00-00)
// 188:                         add, rsp, 40                                  ; 40 = (passing size)32 + (align pad)8
rex(48)op(81)modR/M(c4)i32(28-00-00-00)
// 189:                         sub, rsp, 40                                  ; 40 = (passing size)32 + (align pad)8
rex(48)op(83)modR/M(ec)i8(28)
// 190:                         call, .sht.cons.iStream_sdtor                 ; (call label)
op(e8)co32(00-00-00-00)
// 191:                         add, rsp, 40                                  ; 40 = (passing size)32 + (align pad)8
rex(48)op(81)modR/M(c4)i32(28-00-00-00)
// 192:                         mov, rsp, rbp                                 
rex(48)op(89)modR/M(ec)
// 193:                         pop, rbx                                      
rex(48)op(8f)modR/M(c3)
// 194:                         pop, rbp                                      
rex(48)op(8f)modR/M(c5)
// 195:                         ret                                           
op(c3)
