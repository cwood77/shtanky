// 2: .sht.cons.iStream.printLn: 
// 3:                            push, rbp
rex(48)op(ff)modR/M(f5)
// 4:                            mov, rbp, rsp
rex(48)op(89)modR/M(e5)
// 5:                            mov, rsp, rbp
rex(48)op(89)modR/M(ec)
// 6:                            pop, rbp
rex(48)op(8f)modR/M(c5)
// 7:                            ret
op(c3)
// 10: .sht.cons.iStream.cctor: 
// 11:                          push, rbp
rex(48)op(ff)modR/M(f5)
// 12:                          mov, rbp, rsp
rex(48)op(89)modR/M(e5)
// 13:                          mov, rsp, rbp
rex(48)op(89)modR/M(ec)
// 14:                          pop, rbp
rex(48)op(8f)modR/M(c5)
// 15:                          ret
op(c3)
// 18: .sht.cons.iStream.cdtor: 
// 19:                          push, rbp
rex(48)op(ff)modR/M(f5)
// 20:                          mov, rbp, rsp
rex(48)op(89)modR/M(e5)
// 21:                          mov, rsp, rbp
rex(48)op(89)modR/M(ec)
// 22:                          pop, rbp
rex(48)op(8f)modR/M(c5)
// 23:                          ret
op(c3)
// 26: .sht.cons.stdout.printLn: 
// 27:                           push, rbp     
rex(48)op(ff)modR/M(f5)
// 28:                           mov, rbp, rsp 
rex(48)op(89)modR/M(e5)
// 29:                           sub, rsp, 32  
rex(48)op(83)modR/M(ec)i8(20)
// 30:                           call, ._print ; (call label)
op(e8)co32(00-00-00-00)
// 31:                           add, rsp, 32  
rex(48)op(81)modR/M(c4)i32(20-00-00-00)
// 32:                           mov, rsp, rbp 
rex(48)op(89)modR/M(ec)
// 33:                           pop, rbp      
rex(48)op(8f)modR/M(c5)
// 34:                           ret           
op(c3)
// 37: .sht.cons.stdout.cctor: 
// 38:                         push, rbp
rex(48)op(ff)modR/M(f5)
// 39:                         mov, rbp, rsp
rex(48)op(89)modR/M(e5)
// 40:                         mov, rsp, rbp
rex(48)op(89)modR/M(ec)
// 41:                         pop, rbp
rex(48)op(8f)modR/M(c5)
// 42:                         ret
op(c3)
// 45: .sht.cons.stdout.cdtor: 
// 46:                         push, rbp
rex(48)op(ff)modR/M(f5)
// 47:                         mov, rbp, rsp
rex(48)op(89)modR/M(e5)
// 48:                         mov, rsp, rbp
rex(48)op(89)modR/M(ec)
// 49:                         pop, rbp
rex(48)op(8f)modR/M(c5)
// 50:                         ret
op(c3)
// 53: .sht.cons.program.run: 
// 54:                        push, rbp
rex(48)op(ff)modR/M(f5)
// 55:                        mov, rbp, rsp
rex(48)op(89)modR/M(e5)
// 56:                        mov, rsp, rbp
rex(48)op(89)modR/M(ec)
// 57:                        pop, rbp
rex(48)op(8f)modR/M(c5)
// 58:                        ret
op(c3)
// 61: .sht.cons.program.cctor: 
// 62:                          push, rbp
rex(48)op(ff)modR/M(f5)
// 63:                          mov, rbp, rsp
rex(48)op(89)modR/M(e5)
// 64:                          mov, rsp, rbp
rex(48)op(89)modR/M(ec)
// 65:                          pop, rbp
rex(48)op(8f)modR/M(c5)
// 66:                          ret
op(c3)
// 69: .sht.cons.program.cdtor: 
// 70:                          push, rbp
rex(48)op(ff)modR/M(f5)
// 71:                          mov, rbp, rsp
rex(48)op(89)modR/M(e5)
// 72:                          mov, rsp, rbp
rex(48)op(89)modR/M(ec)
// 73:                          pop, rbp
rex(48)op(8f)modR/M(c5)
// 74:                          ret
op(c3)
// 77: .sht.cons.iStream_vtbl_inst:
// 78: .data, .sht.cons.iStream.printLn 
_lbldata(00-00-00-00,00-00-00-00)
// 81: .sht.cons.program_vtbl_inst:
// 82: .data, .sht.cons.program.run 
_lbldata(00-00-00-00,00-00-00-00)
// 85: .sht.cons.stdout_vtbl_inst:
// 86: .data, .sht.cons.stdout.printLn 
_lbldata(00-00-00-00,00-00-00-00)
// 89: .sht.cons.iStream_sctor: 
// 90:                          push, rbp                                      
rex(48)op(ff)modR/M(f5)
// 91:                          mov, rbp, rsp                                  
rex(48)op(89)modR/M(e5)
// 92:                          sub, rsp, 32                                   
rex(48)op(83)modR/M(ec)i8(20)
// 93:                          call, .sht.core.object_sctor                   ; (call label)
op(e8)co32(00-00-00-00)
// 94:                          add, rsp, 32                                   
rex(48)op(81)modR/M(c4)i32(20-00-00-00)
// 95:                          mov, r10, qwordptr .sht.cons.iStream_vtbl_inst ; codeshape decomp
rex(4c)op(8b)modR/M(15)disp32toLabel(00-00-00-00)
// 96:                          mov, [rcx], r10                                ; =
rex(4c)op(89)modR/M(11)
// 97:                          sub, rsp, 32                                   
rex(48)op(83)modR/M(ec)i8(20)
// 98:                          call, .sht.cons.iStream.cctor                  ; (call label)
op(e8)co32(00-00-00-00)
// 99:                          add, rsp, 32                                   
rex(48)op(81)modR/M(c4)i32(20-00-00-00)
// 100:                          mov, rsp, rbp                                  
rex(48)op(89)modR/M(ec)
// 101:                          pop, rbp                                       
rex(48)op(8f)modR/M(c5)
// 102:                          ret                                            
op(c3)
// 105: .sht.cons.iStream_sdtor: 
// 106:                          push, rbp                                      
rex(48)op(ff)modR/M(f5)
// 107:                          mov, rbp, rsp                                  
rex(48)op(89)modR/M(e5)
// 108:                          mov, r10, qwordptr .sht.cons.iStream_vtbl_inst ; codeshape decomp
rex(4c)op(8b)modR/M(15)disp32toLabel(00-00-00-00)
// 109:                          mov, [rcx], r10                                ; =
rex(4c)op(89)modR/M(11)
// 110:                          sub, rsp, 32                                   
rex(48)op(83)modR/M(ec)i8(20)
// 111:                          call, .sht.cons.iStream.cdtor                  ; (call label)
op(e8)co32(00-00-00-00)
// 112:                          add, rsp, 32                                   
rex(48)op(81)modR/M(c4)i32(20-00-00-00)
// 113:                          sub, rsp, 32                                   
rex(48)op(83)modR/M(ec)i8(20)
// 114:                          call, .sht.core.object_sdtor                   ; (call label)
op(e8)co32(00-00-00-00)
// 115:                          add, rsp, 32                                   
rex(48)op(81)modR/M(c4)i32(20-00-00-00)
// 116:                          mov, rsp, rbp                                  
rex(48)op(89)modR/M(ec)
// 117:                          pop, rbp                                       
rex(48)op(8f)modR/M(c5)
// 118:                          ret                                            
op(c3)
// 121: .sht.cons.program_sctor: 
// 122:                          push, rbp                                      
rex(48)op(ff)modR/M(f5)
// 123:                          mov, rbp, rsp                                  
rex(48)op(89)modR/M(e5)
// 124:                          sub, rsp, 32                                   
rex(48)op(83)modR/M(ec)i8(20)
// 125:                          call, .sht.core.object_sctor                   ; (call label)
op(e8)co32(00-00-00-00)
// 126:                          add, rsp, 32                                   
rex(48)op(81)modR/M(c4)i32(20-00-00-00)
// 127:                          mov, r10, qwordptr .sht.cons.program_vtbl_inst ; codeshape decomp
rex(4c)op(8b)modR/M(15)disp32toLabel(00-00-00-00)
// 128:                          mov, [rcx], r10                                ; =
rex(4c)op(89)modR/M(11)
// 129:                          sub, rsp, 32                                   
rex(48)op(83)modR/M(ec)i8(20)
// 130:                          call, .sht.cons.program.cctor                  ; (call label)
op(e8)co32(00-00-00-00)
// 131:                          add, rsp, 32                                   
rex(48)op(81)modR/M(c4)i32(20-00-00-00)
// 132:                          mov, rsp, rbp                                  
rex(48)op(89)modR/M(ec)
// 133:                          pop, rbp                                       
rex(48)op(8f)modR/M(c5)
// 134:                          ret                                            
op(c3)
// 137: .sht.cons.program_sdtor: 
// 138:                          push, rbp                                      
rex(48)op(ff)modR/M(f5)
// 139:                          mov, rbp, rsp                                  
rex(48)op(89)modR/M(e5)
// 140:                          mov, r10, qwordptr .sht.cons.program_vtbl_inst ; codeshape decomp
rex(4c)op(8b)modR/M(15)disp32toLabel(00-00-00-00)
// 141:                          mov, [rcx], r10                                ; =
rex(4c)op(89)modR/M(11)
// 142:                          sub, rsp, 32                                   
rex(48)op(83)modR/M(ec)i8(20)
// 143:                          call, .sht.cons.program.cdtor                  ; (call label)
op(e8)co32(00-00-00-00)
// 144:                          add, rsp, 32                                   
rex(48)op(81)modR/M(c4)i32(20-00-00-00)
// 145:                          sub, rsp, 32                                   
rex(48)op(83)modR/M(ec)i8(20)
// 146:                          call, .sht.core.object_sdtor                   ; (call label)
op(e8)co32(00-00-00-00)
// 147:                          add, rsp, 32                                   
rex(48)op(81)modR/M(c4)i32(20-00-00-00)
// 148:                          mov, rsp, rbp                                  
rex(48)op(89)modR/M(ec)
// 149:                          pop, rbp                                       
rex(48)op(8f)modR/M(c5)
// 150:                          ret                                            
op(c3)
// 153: .sht.cons.stdout_sctor: 
// 154:                         push, rbp                                     
rex(48)op(ff)modR/M(f5)
// 155:                         mov, rbp, rsp                                 
rex(48)op(89)modR/M(e5)
// 156:                         sub, rsp, 32                                  
rex(48)op(83)modR/M(ec)i8(20)
// 157:                         call, .sht.cons.iStream_sctor                 ; (call label)
op(e8)co32(00-00-00-00)
// 158:                         add, rsp, 32                                  
rex(48)op(81)modR/M(c4)i32(20-00-00-00)
// 159:                         mov, r10, qwordptr .sht.cons.stdout_vtbl_inst ; codeshape decomp
rex(4c)op(8b)modR/M(15)disp32toLabel(00-00-00-00)
// 160:                         mov, [rcx], r10                               ; =
rex(4c)op(89)modR/M(11)
// 161:                         sub, rsp, 32                                  
rex(48)op(83)modR/M(ec)i8(20)
// 162:                         call, .sht.cons.stdout.cctor                  ; (call label)
op(e8)co32(00-00-00-00)
// 163:                         add, rsp, 32                                  
rex(48)op(81)modR/M(c4)i32(20-00-00-00)
// 164:                         mov, rsp, rbp                                 
rex(48)op(89)modR/M(ec)
// 165:                         pop, rbp                                      
rex(48)op(8f)modR/M(c5)
// 166:                         ret                                           
op(c3)
// 169: .sht.cons.stdout_sdtor: 
// 170:                         push, rbp                                     
rex(48)op(ff)modR/M(f5)
// 171:                         mov, rbp, rsp                                 
rex(48)op(89)modR/M(e5)
// 172:                         mov, r10, qwordptr .sht.cons.stdout_vtbl_inst ; codeshape decomp
rex(4c)op(8b)modR/M(15)disp32toLabel(00-00-00-00)
// 173:                         mov, [rcx], r10                               ; =
rex(4c)op(89)modR/M(11)
// 174:                         sub, rsp, 32                                  
rex(48)op(83)modR/M(ec)i8(20)
// 175:                         call, .sht.cons.stdout.cdtor                  ; (call label)
op(e8)co32(00-00-00-00)
// 176:                         add, rsp, 32                                  
rex(48)op(81)modR/M(c4)i32(20-00-00-00)
// 177:                         sub, rsp, 32                                  
rex(48)op(83)modR/M(ec)i8(20)
// 178:                         call, .sht.cons.iStream_sdtor                 ; (call label)
op(e8)co32(00-00-00-00)
// 179:                         add, rsp, 32                                  
rex(48)op(81)modR/M(c4)i32(20-00-00-00)
// 180:                         mov, rsp, rbp                                 
rex(48)op(89)modR/M(ec)
// 181:                         pop, rbp                                      
rex(48)op(8f)modR/M(c5)
// 182:                         ret                                           
op(c3)
