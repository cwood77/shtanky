// 2: .sht.core.object.cctor: 
// 3:                         push, rbp
rex(48)op(ff)modR/M(f5)
// 4:                         mov, rbp, rsp
rex(48)op(89)modR/M(e5)
// 5:                         mov, rsp, rbp
rex(48)op(89)modR/M(ec)
// 6:                         pop, rbp
rex(48)op(8f)modR/M(c5)
// 7:                         ret
op(c3)
// 10: .sht.core.object.cdtor: 
// 11:                         push, rbp
rex(48)op(ff)modR/M(f5)
// 12:                         mov, rbp, rsp
rex(48)op(89)modR/M(e5)
// 13:                         mov, rsp, rbp
rex(48)op(89)modR/M(ec)
// 14:                         pop, rbp
rex(48)op(8f)modR/M(c5)
// 15:                         ret
op(c3)
// 18: .sht.core.object_vtbl_inst:
// 21: .sht.core.object_sctor: 
// 22:                         push, rbp                                     
rex(48)op(ff)modR/M(f5)
// 23:                         push, rbx                                     
rex(48)op(ff)modR/M(f3)
// 24:                         mov, rbp, rsp                                 
rex(48)op(89)modR/M(e5)
// 25:                         lea, rbx, qwordptr .sht.core.object_vtbl_inst 
rex(48)op(8d)modR/M(1d)disp32toLabel(00-00-00-00)
// 26:                         mov, [rcx], rbx                               ; =
rex(48)op(89)modR/M(19)
// 27:                         sub, rsp, 40                                  ; 40 = (passing size)32 + (align pad)8
rex(48)op(83)modR/M(ec)i8(28)
// 28:                         call, .sht.core.object.cctor                  ; (call label)
op(e8)co32(00-00-00-00)
// 29:                         add, rsp, 40                                  ; 40 = (passing size)32 + (align pad)8
rex(48)op(81)modR/M(c4)i32(28-00-00-00)
// 30:                         mov, rsp, rbp                                 
rex(48)op(89)modR/M(ec)
// 31:                         pop, rbx                                      
rex(48)op(8f)modR/M(c3)
// 32:                         pop, rbp                                      
rex(48)op(8f)modR/M(c5)
// 33:                         ret                                           
op(c3)
// 36: .sht.core.object_sdtor: 
// 37:                         push, rbp                                     
rex(48)op(ff)modR/M(f5)
// 38:                         push, rbx                                     
rex(48)op(ff)modR/M(f3)
// 39:                         mov, rbp, rsp                                 
rex(48)op(89)modR/M(e5)
// 40:                         lea, rbx, qwordptr .sht.core.object_vtbl_inst 
rex(48)op(8d)modR/M(1d)disp32toLabel(00-00-00-00)
// 41:                         mov, [rcx], rbx                               ; =
rex(48)op(89)modR/M(19)
// 42:                         sub, rsp, 40                                  ; 40 = (passing size)32 + (align pad)8
rex(48)op(83)modR/M(ec)i8(28)
// 43:                         call, .sht.core.object.cdtor                  ; (call label)
op(e8)co32(00-00-00-00)
// 44:                         add, rsp, 40                                  ; 40 = (passing size)32 + (align pad)8
rex(48)op(81)modR/M(c4)i32(28-00-00-00)
// 45:                         mov, rsp, rbp                                 
rex(48)op(89)modR/M(ec)
// 46:                         pop, rbx                                      
rex(48)op(8f)modR/M(c3)
// 47:                         pop, rbp                                      
rex(48)op(8f)modR/M(c5)
// 48:                         ret                                           
op(c3)
