// 2: .sht.core.loopInstBase.setDir: 
// 3:                                push, rbp         
rex(48)op(ff)modR/M(f5)
// 4:                                mov, rbp, rsp     
rex(48)op(89)modR/M(e5)
// 5:                                mov, [rcx+8], rdx ; =
rex(48)op(89)modR/M(51)d8(08)
// 6:                                mov, rsp, rbp     
rex(48)op(89)modR/M(ec)
// 7:                                pop, rbp          
rex(48)op(8f)modR/M(c5)
// 8:                                ret               
op(c3)
// 11: .sht.core.loopInstBase.getCount:     
// 12:                                      push, rbp                                 
rex(48)op(ff)modR/M(f5)
// 13:                                      mov, rbp, rsp                             
rex(48)op(89)modR/M(e5)
// 14:                                      mov, rax, [rcx+16]                        ;       (self req for rax) [splitter]
rex(48)op(8b)modR/M(41)d8(10)
// 15:                                      goto, .sht.core.loopInstBase.getCount.end ; early return
op(e9)co32(00-00-00-00)
// 17: .sht.core.loopInstBase.getCount.end: 
// 18:                                      mov, rsp, rbp                             
rex(48)op(89)modR/M(ec)
// 19:                                      pop, rbp                                  
rex(48)op(8f)modR/M(c5)
// 20:                                      ret                                       
op(c3)
// 23: .sht.core.loopInstBase.bump:         
// 24:                                      push, rbp                                 
rex(48)op(ff)modR/M(f5)
// 25:                                      push, rbx                                 
rex(48)op(ff)modR/M(f3)
// 26:                                      mov, rbp, rsp                             
rex(48)op(89)modR/M(e5)
// 27:                                      cmp, [rcx+8], 0                           
rex(48)op(81)modR/M(79)d8(08)i32(00-00-00-00)
// 28:                                      je, .sht.core.loopInstBase.bump.else.0    
op(0f-84)co32(00-00-00-00)
// 29:                                      mov, rbx, [rcx+16]                        
rex(48)op(8b)modR/M(59)d8(10)
// 30:                                      add, rbx, 1                               
rex(48)op(81)modR/M(c3)i32(01-00-00-00)
// 31:                                      mov, [rcx+16], rbx                        ; =
rex(48)op(89)modR/M(59)d8(10)
// 32:                                      goto, .sht.core.loopInstBase.bump.endif.1 
op(e9)co32(00-00-00-00)
// 34: .sht.core.loopInstBase.bump.else.0:  
// 35:                                      goto, .sht.core.loopInstBase.bump.endif.1 ; label decomp
op(e9)co32(00-00-00-00)
// 37: .sht.core.loopInstBase.bump.endif.1: 
// 38:                                      mov, rsp, rbp                             
rex(48)op(89)modR/M(ec)
// 39:                                      pop, rbx                                  
rex(48)op(8f)modR/M(c3)
// 40:                                      pop, rbp                                  
rex(48)op(8f)modR/M(c5)
// 41:                                      ret                                       
op(c3)
// 44: .sht.core.loopInstBase.break: 
// 45:                               push, rbp
rex(48)op(ff)modR/M(f5)
// 46:                               mov, rbp, rsp
rex(48)op(89)modR/M(e5)
// 47:                               mov, rsp, rbp
rex(48)op(89)modR/M(ec)
// 48:                               pop, rbp
rex(48)op(8f)modR/M(c5)
// 49:                               ret
op(c3)
// 52: .sht.core.loopInstBase.breakWithReason: 
// 53:                                         push, rbp
rex(48)op(ff)modR/M(f5)
// 54:                                         mov, rbp, rsp
rex(48)op(89)modR/M(e5)
// 55:                                         mov, rsp, rbp
rex(48)op(89)modR/M(ec)
// 56:                                         pop, rbp
rex(48)op(8f)modR/M(c5)
// 57:                                         ret
op(c3)
// 60: .sht.core.loopInstBase.continue: 
// 61:                                  push, rbp
rex(48)op(ff)modR/M(f5)
// 62:                                  mov, rbp, rsp
rex(48)op(89)modR/M(e5)
// 63:                                  mov, rsp, rbp
rex(48)op(89)modR/M(ec)
// 64:                                  pop, rbp
rex(48)op(8f)modR/M(c5)
// 65:                                  ret
op(c3)
// 68: .sht.core.loopInstBase.cctor: 
// 69:                               push, rbp        
rex(48)op(ff)modR/M(f5)
// 70:                               mov, rbp, rsp    
rex(48)op(89)modR/M(e5)
// 71:                               mov, [rcx+8], 1  ; =
rex(48)op(c7)modR/M(41)d8(08)i32(01-00-00-00)
// 72:                               mov, [rcx+16], 0 ; =
rex(48)op(c7)modR/M(41)d8(10)i32(00-00-00-00)
// 73:                               mov, rsp, rbp    
rex(48)op(89)modR/M(ec)
// 74:                               pop, rbp         
rex(48)op(8f)modR/M(c5)
// 75:                               ret              
op(c3)
// 78: .sht.core.loopInstBase.cdtor: 
// 79:                               push, rbp
rex(48)op(ff)modR/M(f5)
// 80:                               mov, rbp, rsp
rex(48)op(89)modR/M(e5)
// 81:                               mov, rsp, rbp
rex(48)op(89)modR/M(ec)
// 82:                               pop, rbp
rex(48)op(8f)modR/M(c5)
// 83:                               ret
op(c3)
// 86: .sht.core.forLoopInst.setBounds: 
// 87:                                  push, rbp
rex(48)op(ff)modR/M(f5)
// 88:                                  mov, rbp, rsp
rex(48)op(89)modR/M(e5)
// 89:                                  mov, rsp, rbp
rex(48)op(89)modR/M(ec)
// 90:                                  pop, rbp
rex(48)op(8f)modR/M(c5)
// 91:                                  ret
op(c3)
// 94: .sht.core.forLoopInst.inBounds: 
// 95:                                 push, rbp
rex(48)op(ff)modR/M(f5)
// 96:                                 mov, rbp, rsp
rex(48)op(89)modR/M(e5)
// 97:                                 mov, rsp, rbp
rex(48)op(89)modR/M(ec)
// 98:                                 pop, rbp
rex(48)op(8f)modR/M(c5)
// 99:                                 ret
op(c3)
// 102: .sht.core.forLoopInst.getValue: 
// 103:                                 push, rbp
rex(48)op(ff)modR/M(f5)
// 104:                                 mov, rbp, rsp
rex(48)op(89)modR/M(e5)
// 105:                                 mov, rsp, rbp
rex(48)op(89)modR/M(ec)
// 106:                                 pop, rbp
rex(48)op(8f)modR/M(c5)
// 107:                                 ret
op(c3)
// 110: .sht.core.forLoopInst.cctor: 
// 111:                              push, rbp        
rex(48)op(ff)modR/M(f5)
// 112:                              mov, rbp, rsp    
rex(48)op(89)modR/M(e5)
// 113:                              mov, [rcx+8], 1  ; =
rex(48)op(c7)modR/M(41)d8(08)i32(01-00-00-00)
// 114:                              mov, [rcx+16], 0 ; =
rex(48)op(c7)modR/M(41)d8(10)i32(00-00-00-00)
// 115:                              mov, rsp, rbp    
rex(48)op(89)modR/M(ec)
// 116:                              pop, rbp         
rex(48)op(8f)modR/M(c5)
// 117:                              ret              
op(c3)
// 120: .sht.core.forLoopInst.cdtor: 
// 121:                              push, rbp
rex(48)op(ff)modR/M(f5)
// 122:                              mov, rbp, rsp
rex(48)op(89)modR/M(e5)
// 123:                              mov, rsp, rbp
rex(48)op(89)modR/M(ec)
// 124:                              pop, rbp
rex(48)op(8f)modR/M(c5)
// 125:                              ret
op(c3)
// 128: .sht.core.whileLoopInst.getValue:     
// 129:                                       push, rbp                                  
rex(48)op(ff)modR/M(f5)
// 130:                                       mov, rbp, rsp                              
rex(48)op(89)modR/M(e5)
// 131:                                       sub, rsp, 32                               
rex(48)op(83)modR/M(ec)i8(20)
// 132:                                       call, .sht.core.loopInstBase.getCount      ; (call label)
op(e8)co32(00-00-00-00)
// 133:                                       add, rsp, 32                               
rex(48)op(81)modR/M(c4)i32(20-00-00-00)
// 134:                                       goto, .sht.core.whileLoopInst.getValue.end ; early return
op(e9)co32(00-00-00-00)
// 136: .sht.core.whileLoopInst.getValue.end: 
// 137:                                       mov, rsp, rbp                              
rex(48)op(89)modR/M(ec)
// 138:                                       pop, rbp                                   
rex(48)op(8f)modR/M(c5)
// 139:                                       ret                                        
op(c3)
// 142: .sht.core.whileLoopInst.cctor: 
// 143:                                push, rbp        
rex(48)op(ff)modR/M(f5)
// 144:                                mov, rbp, rsp    
rex(48)op(89)modR/M(e5)
// 145:                                mov, [rcx+8], 1  ; =
rex(48)op(c7)modR/M(41)d8(08)i32(01-00-00-00)
// 146:                                mov, [rcx+16], 0 ; =
rex(48)op(c7)modR/M(41)d8(10)i32(00-00-00-00)
// 147:                                mov, rsp, rbp    
rex(48)op(89)modR/M(ec)
// 148:                                pop, rbp         
rex(48)op(8f)modR/M(c5)
// 149:                                ret              
op(c3)
// 152: .sht.core.whileLoopInst.cdtor: 
// 153:                                push, rbp
rex(48)op(ff)modR/M(f5)
// 154:                                mov, rbp, rsp
rex(48)op(89)modR/M(e5)
// 155:                                mov, rsp, rbp
rex(48)op(89)modR/M(ec)
// 156:                                pop, rbp
rex(48)op(8f)modR/M(c5)
// 157:                                ret
op(c3)
// 160: .sht.core.forLoopInst_vtbl_inst: 
// 161:                                  goto, .sht.core.loopInstBase.bump
op(e9)co32(00-00-00-00)
// 164: .sht.core.loopInstBase_vtbl_inst: 
// 165:                                   goto, .sht.core.loopInstBase.bump
op(e9)co32(00-00-00-00)
// 168: .sht.core.whileLoopInst_vtbl_inst: 
// 169:                                    goto, .sht.core.loopInstBase.bump
op(e9)co32(00-00-00-00)
// 172: .sht.core.forLoopInst_sctor: 
// 173:                              push, rbp                                          
rex(48)op(ff)modR/M(f5)
// 174:                              push, rbx                                          
rex(48)op(ff)modR/M(f3)
// 175:                              mov, rbp, rsp                                      
rex(48)op(89)modR/M(e5)
// 176:                              sub, rsp, 32                                       
rex(48)op(83)modR/M(ec)i8(20)
// 177:                              call, .sht.core.loopInstBase_sctor                 ; (call label)
op(e8)co32(00-00-00-00)
// 178:                              add, rsp, 32                                       
rex(48)op(81)modR/M(c4)i32(20-00-00-00)
// 179:                              lea, rbx, qwordptr .sht.core.forLoopInst_vtbl_inst 
rex(48)op(8d)modR/M(1d)disp32toLabel(00-00-00-00)
// 180:                              mov, [rcx], rbx                                    ; =
rex(48)op(89)modR/M(19)
// 181:                              sub, rsp, 32                                       
rex(48)op(83)modR/M(ec)i8(20)
// 182:                              call, .sht.core.forLoopInst.cctor                  ; (call label)
op(e8)co32(00-00-00-00)
// 183:                              add, rsp, 32                                       
rex(48)op(81)modR/M(c4)i32(20-00-00-00)
// 184:                              mov, rsp, rbp                                      
rex(48)op(89)modR/M(ec)
// 185:                              pop, rbx                                           
rex(48)op(8f)modR/M(c3)
// 186:                              pop, rbp                                           
rex(48)op(8f)modR/M(c5)
// 187:                              ret                                                
op(c3)
// 190: .sht.core.forLoopInst_sdtor: 
// 191:                              push, rbp                                          
rex(48)op(ff)modR/M(f5)
// 192:                              push, rbx                                          
rex(48)op(ff)modR/M(f3)
// 193:                              mov, rbp, rsp                                      
rex(48)op(89)modR/M(e5)
// 194:                              lea, rbx, qwordptr .sht.core.forLoopInst_vtbl_inst 
rex(48)op(8d)modR/M(1d)disp32toLabel(00-00-00-00)
// 195:                              mov, [rcx], rbx                                    ; =
rex(48)op(89)modR/M(19)
// 196:                              sub, rsp, 32                                       
rex(48)op(83)modR/M(ec)i8(20)
// 197:                              call, .sht.core.forLoopInst.cdtor                  ; (call label)
op(e8)co32(00-00-00-00)
// 198:                              add, rsp, 32                                       
rex(48)op(81)modR/M(c4)i32(20-00-00-00)
// 199:                              sub, rsp, 32                                       
rex(48)op(83)modR/M(ec)i8(20)
// 200:                              call, .sht.core.loopInstBase_sdtor                 ; (call label)
op(e8)co32(00-00-00-00)
// 201:                              add, rsp, 32                                       
rex(48)op(81)modR/M(c4)i32(20-00-00-00)
// 202:                              mov, rsp, rbp                                      
rex(48)op(89)modR/M(ec)
// 203:                              pop, rbx                                           
rex(48)op(8f)modR/M(c3)
// 204:                              pop, rbp                                           
rex(48)op(8f)modR/M(c5)
// 205:                              ret                                                
op(c3)
// 208: .sht.core.loopInstBase_sctor: 
// 209:                               push, rbp                                           
rex(48)op(ff)modR/M(f5)
// 210:                               push, rbx                                           
rex(48)op(ff)modR/M(f3)
// 211:                               mov, rbp, rsp                                       
rex(48)op(89)modR/M(e5)
// 212:                               sub, rsp, 32                                        
rex(48)op(83)modR/M(ec)i8(20)
// 213:                               call, .sht.core.object_sctor                        ; (call label)
op(e8)co32(00-00-00-00)
// 214:                               add, rsp, 32                                        
rex(48)op(81)modR/M(c4)i32(20-00-00-00)
// 215:                               lea, rbx, qwordptr .sht.core.loopInstBase_vtbl_inst 
rex(48)op(8d)modR/M(1d)disp32toLabel(00-00-00-00)
// 216:                               mov, [rcx], rbx                                     ; =
rex(48)op(89)modR/M(19)
// 217:                               sub, rsp, 32                                        
rex(48)op(83)modR/M(ec)i8(20)
// 218:                               call, .sht.core.loopInstBase.cctor                  ; (call label)
op(e8)co32(00-00-00-00)
// 219:                               add, rsp, 32                                        
rex(48)op(81)modR/M(c4)i32(20-00-00-00)
// 220:                               mov, rsp, rbp                                       
rex(48)op(89)modR/M(ec)
// 221:                               pop, rbx                                            
rex(48)op(8f)modR/M(c3)
// 222:                               pop, rbp                                            
rex(48)op(8f)modR/M(c5)
// 223:                               ret                                                 
op(c3)
// 226: .sht.core.loopInstBase_sdtor: 
// 227:                               push, rbp                                           
rex(48)op(ff)modR/M(f5)
// 228:                               push, rbx                                           
rex(48)op(ff)modR/M(f3)
// 229:                               mov, rbp, rsp                                       
rex(48)op(89)modR/M(e5)
// 230:                               lea, rbx, qwordptr .sht.core.loopInstBase_vtbl_inst 
rex(48)op(8d)modR/M(1d)disp32toLabel(00-00-00-00)
// 231:                               mov, [rcx], rbx                                     ; =
rex(48)op(89)modR/M(19)
// 232:                               sub, rsp, 32                                        
rex(48)op(83)modR/M(ec)i8(20)
// 233:                               call, .sht.core.loopInstBase.cdtor                  ; (call label)
op(e8)co32(00-00-00-00)
// 234:                               add, rsp, 32                                        
rex(48)op(81)modR/M(c4)i32(20-00-00-00)
// 235:                               sub, rsp, 32                                        
rex(48)op(83)modR/M(ec)i8(20)
// 236:                               call, .sht.core.object_sdtor                        ; (call label)
op(e8)co32(00-00-00-00)
// 237:                               add, rsp, 32                                        
rex(48)op(81)modR/M(c4)i32(20-00-00-00)
// 238:                               mov, rsp, rbp                                       
rex(48)op(89)modR/M(ec)
// 239:                               pop, rbx                                            
rex(48)op(8f)modR/M(c3)
// 240:                               pop, rbp                                            
rex(48)op(8f)modR/M(c5)
// 241:                               ret                                                 
op(c3)
// 244: .sht.core.whileLoopInst_sctor: 
// 245:                                push, rbp                                            
rex(48)op(ff)modR/M(f5)
// 246:                                push, rbx                                            
rex(48)op(ff)modR/M(f3)
// 247:                                mov, rbp, rsp                                        
rex(48)op(89)modR/M(e5)
// 248:                                sub, rsp, 32                                         
rex(48)op(83)modR/M(ec)i8(20)
// 249:                                call, .sht.core.loopInstBase_sctor                   ; (call label)
op(e8)co32(00-00-00-00)
// 250:                                add, rsp, 32                                         
rex(48)op(81)modR/M(c4)i32(20-00-00-00)
// 251:                                lea, rbx, qwordptr .sht.core.whileLoopInst_vtbl_inst 
rex(48)op(8d)modR/M(1d)disp32toLabel(00-00-00-00)
// 252:                                mov, [rcx], rbx                                      ; =
rex(48)op(89)modR/M(19)
// 253:                                sub, rsp, 32                                         
rex(48)op(83)modR/M(ec)i8(20)
// 254:                                call, .sht.core.whileLoopInst.cctor                  ; (call label)
op(e8)co32(00-00-00-00)
// 255:                                add, rsp, 32                                         
rex(48)op(81)modR/M(c4)i32(20-00-00-00)
// 256:                                mov, rsp, rbp                                        
rex(48)op(89)modR/M(ec)
// 257:                                pop, rbx                                             
rex(48)op(8f)modR/M(c3)
// 258:                                pop, rbp                                             
rex(48)op(8f)modR/M(c5)
// 259:                                ret                                                  
op(c3)
// 262: .sht.core.whileLoopInst_sdtor: 
// 263:                                push, rbp                                            
rex(48)op(ff)modR/M(f5)
// 264:                                push, rbx                                            
rex(48)op(ff)modR/M(f3)
// 265:                                mov, rbp, rsp                                        
rex(48)op(89)modR/M(e5)
// 266:                                lea, rbx, qwordptr .sht.core.whileLoopInst_vtbl_inst 
rex(48)op(8d)modR/M(1d)disp32toLabel(00-00-00-00)
// 267:                                mov, [rcx], rbx                                      ; =
rex(48)op(89)modR/M(19)
// 268:                                sub, rsp, 32                                         
rex(48)op(83)modR/M(ec)i8(20)
// 269:                                call, .sht.core.whileLoopInst.cdtor                  ; (call label)
op(e8)co32(00-00-00-00)
// 270:                                add, rsp, 32                                         
rex(48)op(81)modR/M(c4)i32(20-00-00-00)
// 271:                                sub, rsp, 32                                         
rex(48)op(83)modR/M(ec)i8(20)
// 272:                                call, .sht.core.loopInstBase_sdtor                   ; (call label)
op(e8)co32(00-00-00-00)
// 273:                                add, rsp, 32                                         
rex(48)op(81)modR/M(c4)i32(20-00-00-00)
// 274:                                mov, rsp, rbp                                        
rex(48)op(89)modR/M(ec)
// 275:                                pop, rbx                                             
rex(48)op(8f)modR/M(c3)
// 276:                                pop, rbp                                             
rex(48)op(8f)modR/M(c5)
// 277:                                ret                                                  
op(c3)
