// 2: .sht.core.loopInstBase.setDir: 
// 3:                                push, rbp         
rex(48)op(ff)modR/M(f5)
// 4:                                mov, rbp, rsp     
rex(48)op(89)modR/M(e5)
// 5:                                mov, [rcx+8], rdx ; =
rex(48)op(89)modR/M(51)d8(08)
// 6:                                mov, rsp, rbp     
rex(48)op(89)modR/M(ec)
// 7:                                pop, rbp          
rex(48)op(8f)modR/M(c5)
// 8:                                ret               
op(c3)
// 11: .sht.core.loopInstBase.getCount:     
// 12:                                      push, rbp                                 
rex(48)op(ff)modR/M(f5)
// 13:                                      mov, rbp, rsp                             
rex(48)op(89)modR/M(e5)
// 14:                                      mov, rax, [rcx+16]                        ;       (self req for rax) [splitter]
rex(48)op(8b)modR/M(41)d8(10)
// 15:                                      goto, .sht.core.loopInstBase.getCount.end ; early return
op(e9)co32(00-00-00-00)
// 17: .sht.core.loopInstBase.getCount.end: 
// 18:                                      mov, rsp, rbp                             
rex(48)op(89)modR/M(ec)
// 19:                                      pop, rbp                                  
rex(48)op(8f)modR/M(c5)
// 20:                                      ret                                       
op(c3)
// 23: .sht.core.loopInstBase.bump:         
// 24:                                      push, rbp                                 
rex(48)op(ff)modR/M(f5)
// 25:                                      push, rbx                                 
rex(48)op(ff)modR/M(f3)
// 26:                                      mov, rbp, rsp                             
rex(48)op(89)modR/M(e5)
// 27:                                      cmp, [rcx+8], 0                           
rex(48)op(81)modR/M(79)d8(08)i32(00-00-00-00)
// 28:                                      je, .sht.core.loopInstBase.bump.else.0    
op(0f-84)co32(00-00-00-00)
// 29:                                      mov, rbx, [rcx+16]                        
rex(48)op(8b)modR/M(59)d8(10)
// 30:                                      add, rbx, 1                               
rex(48)op(81)modR/M(c3)i32(01-00-00-00)
// 31:                                      mov, [rcx+16], rbx                        ; =
rex(48)op(89)modR/M(59)d8(10)
// 32:                                      goto, .sht.core.loopInstBase.bump.endif.1 
op(e9)co32(00-00-00-00)
// 34: .sht.core.loopInstBase.bump.else.0:  
// 35:                                      goto, .sht.core.loopInstBase.bump.endif.1 ; label decomp
op(e9)co32(00-00-00-00)
// 37: .sht.core.loopInstBase.bump.endif.1: 
// 38:                                      mov, rsp, rbp                             
rex(48)op(89)modR/M(ec)
// 39:                                      pop, rbx                                  
rex(48)op(8f)modR/M(c3)
// 40:                                      pop, rbp                                  
rex(48)op(8f)modR/M(c5)
// 41:                                      ret                                       
op(c3)
// 44: .sht.core.loopInstBase.break: 
// 45:                               push, rbp
rex(48)op(ff)modR/M(f5)
// 46:                               mov, rbp, rsp
rex(48)op(89)modR/M(e5)
// 47:                               mov, rsp, rbp
rex(48)op(89)modR/M(ec)
// 48:                               pop, rbp
rex(48)op(8f)modR/M(c5)
// 49:                               ret
op(c3)
// 52: .sht.core.loopInstBase.breakWithReason: 
// 53:                                         push, rbp
rex(48)op(ff)modR/M(f5)
// 54:                                         mov, rbp, rsp
rex(48)op(89)modR/M(e5)
// 55:                                         mov, rsp, rbp
rex(48)op(89)modR/M(ec)
// 56:                                         pop, rbp
rex(48)op(8f)modR/M(c5)
// 57:                                         ret
op(c3)
// 60: .sht.core.loopInstBase.continue: 
// 61:                                  push, rbp
rex(48)op(ff)modR/M(f5)
// 62:                                  mov, rbp, rsp
rex(48)op(89)modR/M(e5)
// 63:                                  mov, rsp, rbp
rex(48)op(89)modR/M(ec)
// 64:                                  pop, rbp
rex(48)op(8f)modR/M(c5)
// 65:                                  ret
op(c3)
// 68: .sht.core.loopInstBase.setCount: 
// 69:                                  push, rbp          
rex(48)op(ff)modR/M(f5)
// 70:                                  mov, rbp, rsp      
rex(48)op(89)modR/M(e5)
// 71:                                  mov, [rcx+16], rdx ; =
rex(48)op(89)modR/M(51)d8(10)
// 72:                                  mov, rsp, rbp      
rex(48)op(89)modR/M(ec)
// 73:                                  pop, rbp           
rex(48)op(8f)modR/M(c5)
// 74:                                  ret                
op(c3)
// 77: .sht.core.loopInstBase.cctor: 
// 78:                               push, rbp        
rex(48)op(ff)modR/M(f5)
// 79:                               mov, rbp, rsp    
rex(48)op(89)modR/M(e5)
// 80:                               mov, [rcx+8], 1  ; =
rex(48)op(c7)modR/M(41)d8(08)i32(01-00-00-00)
// 81:                               mov, [rcx+16], 0 ; =
rex(48)op(c7)modR/M(41)d8(10)i32(00-00-00-00)
// 82:                               mov, rsp, rbp    
rex(48)op(89)modR/M(ec)
// 83:                               pop, rbp         
rex(48)op(8f)modR/M(c5)
// 84:                               ret              
op(c3)
// 87: .sht.core.loopInstBase.cdtor: 
// 88:                               push, rbp
rex(48)op(ff)modR/M(f5)
// 89:                               mov, rbp, rsp
rex(48)op(89)modR/M(e5)
// 90:                               mov, rsp, rbp
rex(48)op(89)modR/M(ec)
// 91:                               pop, rbp
rex(48)op(8f)modR/M(c5)
// 92:                               ret
op(c3)
// 95: .sht.core.forLoopInst.setBounds: 
// 96:                                  push, rbp                             
rex(48)op(ff)modR/M(f5)
// 97:                                  push, rbx                             
rex(48)op(ff)modR/M(f3)
// 98:                                  mov, rbp, rsp                         
rex(48)op(89)modR/M(e5)
// 99:                                  sub, rsp, 32                          
rex(48)op(83)modR/M(ec)i8(20)
// 100:                                  mov, rbx, r8                          ; (preserve) [combiner]
rex(4c)op(89)modR/M(c3)
// 101:                                  call, .sht.core.loopInstBase.setCount ; (call label)
op(e8)co32(00-00-00-00)
// 102:                                  add, rsp, 32                          
rex(48)op(81)modR/M(c4)i32(20-00-00-00)
// 103:                                  mov, [rcx+32], rbx                    ; =
rex(48)op(89)modR/M(59)d8(20)
// 104:                                  mov, rsp, rbp                         
rex(48)op(89)modR/M(ec)
// 105:                                  pop, rbx                              
rex(48)op(8f)modR/M(c3)
// 106:                                  pop, rbp                              
rex(48)op(8f)modR/M(c5)
// 107:                                  ret                                   
op(c3)
// 110: .sht.core.forLoopInst.inBounds:         
// 111:                                         push, rbp                                    
rex(48)op(ff)modR/M(f5)
// 112:                                         push, rbx                                    
rex(48)op(ff)modR/M(f3)
// 113:                                         push, rdi                                    
rex(48)op(ff)modR/M(f7)
// 114:                                         mov, rbp, rsp                                
rex(48)op(89)modR/M(e5)
// 115:                                         sub, rsp, 32                                 
rex(48)op(83)modR/M(ec)i8(20)
// 116:                                         call, .sht.core.loopInstBase.getCount        ; (call label)
op(e8)co32(00-00-00-00)
// 117:                                         add, rsp, 32                                 
rex(48)op(81)modR/M(c4)i32(20-00-00-00)
// 118:                                         xor, rbx, rbx                                
rex(48)op(31)modR/M(db)
// 119:                                         cmp, rax, [rcx+24]                           
rex(48)op(38)modR/M(41)d8(18)
// 120:                                         setlts, rbx                                  
rex(48)op(0f-9c)modR/M(c3)
// 121:                                         cmp, rbx, 0                                  
rex(48)op(81)modR/M(fb)i32(00-00-00-00)
// 122:                                         je, .sht.core.forLoopInst.inBounds.else.0    
op(0f-84)co32(00-00-00-00)
// 123:                                         mov, rax, 0                                  ;       (0 req for rax) [splitter]
rex(48)op(b8)i64(00-00-00-00,00-00-00-00)
// 124:                                         goto, .sht.core.forLoopInst.inBounds.end     ; early return
op(e9)co32(00-00-00-00)
// 125:                                         goto, .sht.core.forLoopInst.inBounds.endif.1 
op(e9)co32(00-00-00-00)
// 127: .sht.core.forLoopInst.inBounds.else.0:  
// 128:                                         goto, .sht.core.forLoopInst.inBounds.endif.1 ; label decomp
op(e9)co32(00-00-00-00)
// 130: .sht.core.forLoopInst.inBounds.endif.1: 
// 131:                                         sub, rsp, 32                                 
rex(48)op(83)modR/M(ec)i8(20)
// 132:                                         mov, rbx, rax                                ; (preserve) [combiner]
rex(48)op(89)modR/M(c3)
// 133:                                         call, .sht.core.loopInstBase.getCount        ; (call label)
op(e8)co32(00-00-00-00)
// 134:                                         add, rsp, 32                                 
rex(48)op(81)modR/M(c4)i32(20-00-00-00)
// 135:                                         xor, rdi, rdi                                
rex(48)op(31)modR/M(ff)
// 136:                                         mov, r10, [rcx+32]                           ; codeshape decomp
rex(4c)op(8b)modR/M(51)d8(20)
// 137:                                         cmp, r10, rax                                
rex(4c)op(38)modR/M(d0)
// 138:                                         setlts, rdi                                  
rex(48)op(0f-9c)modR/M(c7)
// 139:                                         cmp, rdi, 0                                  
rex(48)op(81)modR/M(ff)i32(00-00-00-00)
// 140:                                         je, .sht.core.forLoopInst.inBounds.else.2    
op(0f-84)co32(00-00-00-00)
// 141:                                         mov, rax, rbx                                ; (restore [combiner])
rex(48)op(89)modR/M(d8)
// 142:                                         mov, rax, 0                                  ;       (0 req for rax) [splitter]
rex(48)op(b8)i64(00-00-00-00,00-00-00-00)
// 143:                                         goto, .sht.core.forLoopInst.inBounds.end     ; early return
op(e9)co32(00-00-00-00)
// 144:                                         goto, .sht.core.forLoopInst.inBounds.endif.3 
op(e9)co32(00-00-00-00)
// 146: .sht.core.forLoopInst.inBounds.else.2:  
// 147:                                         goto, .sht.core.forLoopInst.inBounds.endif.3 ; label decomp
op(e9)co32(00-00-00-00)
// 149: .sht.core.forLoopInst.inBounds.endif.3: 
// 150:                                         mov, rax, 1                                  ;       (1 req for rax) [splitter]
rex(48)op(b8)i64(01-00-00-00,00-00-00-00)
// 151:                                         goto, .sht.core.forLoopInst.inBounds.end     ; early return
op(e9)co32(00-00-00-00)
// 153: .sht.core.forLoopInst.inBounds.end:     
// 154:                                         mov, rsp, rbp                                
rex(48)op(89)modR/M(ec)
// 155:                                         pop, rdi                                     
rex(48)op(8f)modR/M(c7)
// 156:                                         pop, rbx                                     
rex(48)op(8f)modR/M(c3)
// 157:                                         pop, rbp                                     
rex(48)op(8f)modR/M(c5)
// 158:                                         ret                                          
op(c3)
// 161: .sht.core.forLoopInst.getValue:     
// 162:                                     push, rbp                                
rex(48)op(ff)modR/M(f5)
// 163:                                     mov, rbp, rsp                            
rex(48)op(89)modR/M(e5)
// 164:                                     sub, rsp, 32                             
rex(48)op(83)modR/M(ec)i8(20)
// 165:                                     call, .sht.core.loopInstBase.getCount    ; (call label)
op(e8)co32(00-00-00-00)
// 166:                                     add, rsp, 32                             
rex(48)op(81)modR/M(c4)i32(20-00-00-00)
// 167:                                     goto, .sht.core.forLoopInst.getValue.end ; early return
op(e9)co32(00-00-00-00)
// 169: .sht.core.forLoopInst.getValue.end: 
// 170:                                     mov, rsp, rbp                            
rex(48)op(89)modR/M(ec)
// 171:                                     pop, rbp                                 
rex(48)op(8f)modR/M(c5)
// 172:                                     ret                                      
op(c3)
// 175: .sht.core.forLoopInst.cctor: 
// 176:                              push, rbp        
rex(48)op(ff)modR/M(f5)
// 177:                              mov, rbp, rsp    
rex(48)op(89)modR/M(e5)
// 178:                              mov, [rcx+8], 1  ; =
rex(48)op(c7)modR/M(41)d8(08)i32(01-00-00-00)
// 179:                              mov, [rcx+16], 0 ; =
rex(48)op(c7)modR/M(41)d8(10)i32(00-00-00-00)
// 180:                              mov, [rcx+24], 0 ; =
rex(48)op(c7)modR/M(41)d8(18)i32(00-00-00-00)
// 181:                              mov, [rcx+32], 0 ; =
rex(48)op(c7)modR/M(41)d8(20)i32(00-00-00-00)
// 182:                              mov, rsp, rbp    
rex(48)op(89)modR/M(ec)
// 183:                              pop, rbp         
rex(48)op(8f)modR/M(c5)
// 184:                              ret              
op(c3)
// 187: .sht.core.forLoopInst.cdtor: 
// 188:                              push, rbp
rex(48)op(ff)modR/M(f5)
// 189:                              mov, rbp, rsp
rex(48)op(89)modR/M(e5)
// 190:                              mov, rsp, rbp
rex(48)op(89)modR/M(ec)
// 191:                              pop, rbp
rex(48)op(8f)modR/M(c5)
// 192:                              ret
op(c3)
// 195: .sht.core.whileLoopInst.getValue:     
// 196:                                       push, rbp                                  
rex(48)op(ff)modR/M(f5)
// 197:                                       mov, rbp, rsp                              
rex(48)op(89)modR/M(e5)
// 198:                                       sub, rsp, 32                               
rex(48)op(83)modR/M(ec)i8(20)
// 199:                                       call, .sht.core.loopInstBase.getCount      ; (call label)
op(e8)co32(00-00-00-00)
// 200:                                       add, rsp, 32                               
rex(48)op(81)modR/M(c4)i32(20-00-00-00)
// 201:                                       goto, .sht.core.whileLoopInst.getValue.end ; early return
op(e9)co32(00-00-00-00)
// 203: .sht.core.whileLoopInst.getValue.end: 
// 204:                                       mov, rsp, rbp                              
rex(48)op(89)modR/M(ec)
// 205:                                       pop, rbp                                   
rex(48)op(8f)modR/M(c5)
// 206:                                       ret                                        
op(c3)
// 209: .sht.core.whileLoopInst.cctor: 
// 210:                                push, rbp        
rex(48)op(ff)modR/M(f5)
// 211:                                mov, rbp, rsp    
rex(48)op(89)modR/M(e5)
// 212:                                mov, [rcx+8], 1  ; =
rex(48)op(c7)modR/M(41)d8(08)i32(01-00-00-00)
// 213:                                mov, [rcx+16], 0 ; =
rex(48)op(c7)modR/M(41)d8(10)i32(00-00-00-00)
// 214:                                mov, rsp, rbp    
rex(48)op(89)modR/M(ec)
// 215:                                pop, rbp         
rex(48)op(8f)modR/M(c5)
// 216:                                ret              
op(c3)
// 219: .sht.core.whileLoopInst.cdtor: 
// 220:                                push, rbp
rex(48)op(ff)modR/M(f5)
// 221:                                mov, rbp, rsp
rex(48)op(89)modR/M(e5)
// 222:                                mov, rsp, rbp
rex(48)op(89)modR/M(ec)
// 223:                                pop, rbp
rex(48)op(8f)modR/M(c5)
// 224:                                ret
op(c3)
// 227: .sht.core.forLoopInst_vtbl_inst: 
// 228:                                  goto, .sht.core.loopInstBase.bump
op(e9)co32(00-00-00-00)
// 231: .sht.core.loopInstBase_vtbl_inst: 
// 232:                                   goto, .sht.core.loopInstBase.bump
op(e9)co32(00-00-00-00)
// 235: .sht.core.whileLoopInst_vtbl_inst: 
// 236:                                    goto, .sht.core.loopInstBase.bump
op(e9)co32(00-00-00-00)
// 239: .sht.core.forLoopInst_sctor: 
// 240:                              push, rbp                                          
rex(48)op(ff)modR/M(f5)
// 241:                              push, rbx                                          
rex(48)op(ff)modR/M(f3)
// 242:                              mov, rbp, rsp                                      
rex(48)op(89)modR/M(e5)
// 243:                              sub, rsp, 32                                       
rex(48)op(83)modR/M(ec)i8(20)
// 244:                              call, .sht.core.loopInstBase_sctor                 ; (call label)
op(e8)co32(00-00-00-00)
// 245:                              add, rsp, 32                                       
rex(48)op(81)modR/M(c4)i32(20-00-00-00)
// 246:                              lea, rbx, qwordptr .sht.core.forLoopInst_vtbl_inst 
rex(48)op(8d)modR/M(1d)disp32toLabel(00-00-00-00)
// 247:                              mov, [rcx], rbx                                    ; =
rex(48)op(89)modR/M(19)
// 248:                              sub, rsp, 32                                       
rex(48)op(83)modR/M(ec)i8(20)
// 249:                              call, .sht.core.forLoopInst.cctor                  ; (call label)
op(e8)co32(00-00-00-00)
// 250:                              add, rsp, 32                                       
rex(48)op(81)modR/M(c4)i32(20-00-00-00)
// 251:                              mov, rsp, rbp                                      
rex(48)op(89)modR/M(ec)
// 252:                              pop, rbx                                           
rex(48)op(8f)modR/M(c3)
// 253:                              pop, rbp                                           
rex(48)op(8f)modR/M(c5)
// 254:                              ret                                                
op(c3)
// 257: .sht.core.forLoopInst_sdtor: 
// 258:                              push, rbp                                          
rex(48)op(ff)modR/M(f5)
// 259:                              push, rbx                                          
rex(48)op(ff)modR/M(f3)
// 260:                              mov, rbp, rsp                                      
rex(48)op(89)modR/M(e5)
// 261:                              lea, rbx, qwordptr .sht.core.forLoopInst_vtbl_inst 
rex(48)op(8d)modR/M(1d)disp32toLabel(00-00-00-00)
// 262:                              mov, [rcx], rbx                                    ; =
rex(48)op(89)modR/M(19)
// 263:                              sub, rsp, 32                                       
rex(48)op(83)modR/M(ec)i8(20)
// 264:                              call, .sht.core.forLoopInst.cdtor                  ; (call label)
op(e8)co32(00-00-00-00)
// 265:                              add, rsp, 32                                       
rex(48)op(81)modR/M(c4)i32(20-00-00-00)
// 266:                              sub, rsp, 32                                       
rex(48)op(83)modR/M(ec)i8(20)
// 267:                              call, .sht.core.loopInstBase_sdtor                 ; (call label)
op(e8)co32(00-00-00-00)
// 268:                              add, rsp, 32                                       
rex(48)op(81)modR/M(c4)i32(20-00-00-00)
// 269:                              mov, rsp, rbp                                      
rex(48)op(89)modR/M(ec)
// 270:                              pop, rbx                                           
rex(48)op(8f)modR/M(c3)
// 271:                              pop, rbp                                           
rex(48)op(8f)modR/M(c5)
// 272:                              ret                                                
op(c3)
// 275: .sht.core.loopInstBase_sctor: 
// 276:                               push, rbp                                           
rex(48)op(ff)modR/M(f5)
// 277:                               push, rbx                                           
rex(48)op(ff)modR/M(f3)
// 278:                               mov, rbp, rsp                                       
rex(48)op(89)modR/M(e5)
// 279:                               sub, rsp, 32                                        
rex(48)op(83)modR/M(ec)i8(20)
// 280:                               call, .sht.core.object_sctor                        ; (call label)
op(e8)co32(00-00-00-00)
// 281:                               add, rsp, 32                                        
rex(48)op(81)modR/M(c4)i32(20-00-00-00)
// 282:                               lea, rbx, qwordptr .sht.core.loopInstBase_vtbl_inst 
rex(48)op(8d)modR/M(1d)disp32toLabel(00-00-00-00)
// 283:                               mov, [rcx], rbx                                     ; =
rex(48)op(89)modR/M(19)
// 284:                               sub, rsp, 32                                        
rex(48)op(83)modR/M(ec)i8(20)
// 285:                               call, .sht.core.loopInstBase.cctor                  ; (call label)
op(e8)co32(00-00-00-00)
// 286:                               add, rsp, 32                                        
rex(48)op(81)modR/M(c4)i32(20-00-00-00)
// 287:                               mov, rsp, rbp                                       
rex(48)op(89)modR/M(ec)
// 288:                               pop, rbx                                            
rex(48)op(8f)modR/M(c3)
// 289:                               pop, rbp                                            
rex(48)op(8f)modR/M(c5)
// 290:                               ret                                                 
op(c3)
// 293: .sht.core.loopInstBase_sdtor: 
// 294:                               push, rbp                                           
rex(48)op(ff)modR/M(f5)
// 295:                               push, rbx                                           
rex(48)op(ff)modR/M(f3)
// 296:                               mov, rbp, rsp                                       
rex(48)op(89)modR/M(e5)
// 297:                               lea, rbx, qwordptr .sht.core.loopInstBase_vtbl_inst 
rex(48)op(8d)modR/M(1d)disp32toLabel(00-00-00-00)
// 298:                               mov, [rcx], rbx                                     ; =
rex(48)op(89)modR/M(19)
// 299:                               sub, rsp, 32                                        
rex(48)op(83)modR/M(ec)i8(20)
// 300:                               call, .sht.core.loopInstBase.cdtor                  ; (call label)
op(e8)co32(00-00-00-00)
// 301:                               add, rsp, 32                                        
rex(48)op(81)modR/M(c4)i32(20-00-00-00)
// 302:                               sub, rsp, 32                                        
rex(48)op(83)modR/M(ec)i8(20)
// 303:                               call, .sht.core.object_sdtor                        ; (call label)
op(e8)co32(00-00-00-00)
// 304:                               add, rsp, 32                                        
rex(48)op(81)modR/M(c4)i32(20-00-00-00)
// 305:                               mov, rsp, rbp                                       
rex(48)op(89)modR/M(ec)
// 306:                               pop, rbx                                            
rex(48)op(8f)modR/M(c3)
// 307:                               pop, rbp                                            
rex(48)op(8f)modR/M(c5)
// 308:                               ret                                                 
op(c3)
// 311: .sht.core.whileLoopInst_sctor: 
// 312:                                push, rbp                                            
rex(48)op(ff)modR/M(f5)
// 313:                                push, rbx                                            
rex(48)op(ff)modR/M(f3)
// 314:                                mov, rbp, rsp                                        
rex(48)op(89)modR/M(e5)
// 315:                                sub, rsp, 32                                         
rex(48)op(83)modR/M(ec)i8(20)
// 316:                                call, .sht.core.loopInstBase_sctor                   ; (call label)
op(e8)co32(00-00-00-00)
// 317:                                add, rsp, 32                                         
rex(48)op(81)modR/M(c4)i32(20-00-00-00)
// 318:                                lea, rbx, qwordptr .sht.core.whileLoopInst_vtbl_inst 
rex(48)op(8d)modR/M(1d)disp32toLabel(00-00-00-00)
// 319:                                mov, [rcx], rbx                                      ; =
rex(48)op(89)modR/M(19)
// 320:                                sub, rsp, 32                                         
rex(48)op(83)modR/M(ec)i8(20)
// 321:                                call, .sht.core.whileLoopInst.cctor                  ; (call label)
op(e8)co32(00-00-00-00)
// 322:                                add, rsp, 32                                         
rex(48)op(81)modR/M(c4)i32(20-00-00-00)
// 323:                                mov, rsp, rbp                                        
rex(48)op(89)modR/M(ec)
// 324:                                pop, rbx                                             
rex(48)op(8f)modR/M(c3)
// 325:                                pop, rbp                                             
rex(48)op(8f)modR/M(c5)
// 326:                                ret                                                  
op(c3)
// 329: .sht.core.whileLoopInst_sdtor: 
// 330:                                push, rbp                                            
rex(48)op(ff)modR/M(f5)
// 331:                                push, rbx                                            
rex(48)op(ff)modR/M(f3)
// 332:                                mov, rbp, rsp                                        
rex(48)op(89)modR/M(e5)
// 333:                                lea, rbx, qwordptr .sht.core.whileLoopInst_vtbl_inst 
rex(48)op(8d)modR/M(1d)disp32toLabel(00-00-00-00)
// 334:                                mov, [rcx], rbx                                      ; =
rex(48)op(89)modR/M(19)
// 335:                                sub, rsp, 32                                         
rex(48)op(83)modR/M(ec)i8(20)
// 336:                                call, .sht.core.whileLoopInst.cdtor                  ; (call label)
op(e8)co32(00-00-00-00)
// 337:                                add, rsp, 32                                         
rex(48)op(81)modR/M(c4)i32(20-00-00-00)
// 338:                                sub, rsp, 32                                         
rex(48)op(83)modR/M(ec)i8(20)
// 339:                                call, .sht.core.loopInstBase_sdtor                   ; (call label)
op(e8)co32(00-00-00-00)
// 340:                                add, rsp, 32                                         
rex(48)op(81)modR/M(c4)i32(20-00-00-00)
// 341:                                mov, rsp, rbp                                        
rex(48)op(89)modR/M(ec)
// 342:                                pop, rbx                                             
rex(48)op(8f)modR/M(c3)
// 343:                                pop, rbp                                             
rex(48)op(8f)modR/M(c5)
// 344:                                ret                                                  
op(c3)
