// 2: .sht.core.string.set: 
// 3:                       push, rbp         
rex(48)op(ff)modR/M(f5)
// 4:                       push, rbx         
rex(48)op(ff)modR/M(f3)
// 5:                       mov, rbp, rsp     
rex(48)op(89)modR/M(e5)
// 6:                       sub, rsp, 40      
rex(48)op(83)modR/M(ec)i8(28)
// 7:                       mov, rbx, rcx     ; (preserve) [combiner]
rex(48)op(89)modR/M(cb)
// 8:                       mov, rcx, rdx     ;       (literal req for rcx) [splitter]
rex(48)op(89)modR/M(d1)
// 9:                       call, ._strld     ; (call label)
op(e8)co32(00-00-00-00)
// 10:                       add, rsp, 40      
rex(48)op(81)modR/M(c4)i32(28-00-00-00)
// 11:                       mov, [rbx+8], rax ; =
rex(48)op(89)modR/M(43)d8(08)
// 12:                       mov, rsp, rbp     
rex(48)op(89)modR/M(ec)
// 13:                       pop, rbx          
rex(48)op(8f)modR/M(c3)
// 14:                       pop, rbp          
rex(48)op(8f)modR/M(c5)
// 15:                       ret               
op(c3)
// 18: .sht.core.string.length: 
// 19:                          push, rbp         
rex(48)op(ff)modR/M(f5)
// 20:                          push, rbx         
rex(48)op(ff)modR/M(f3)
// 21:                          mov, rbp, rsp     
rex(48)op(89)modR/M(e5)
// 22:                          sub, rsp, 40      
rex(48)op(83)modR/M(ec)i8(28)
// 23:                          mov, rbx, rcx     ; (preserve) [combiner]
rex(48)op(89)modR/M(cb)
// 24:                          mov, rcx, [rbx+8] ; shape:hoist addrOf from call
rex(48)op(8b)modR/M(4b)d8(08)
// 25:                          call, ._strlen    ; (call label)
op(e8)co32(00-00-00-00)
// 26:                          add, rsp, 40      
rex(48)op(81)modR/M(c4)i32(28-00-00-00)
// 27:                          mov, rsp, rbp     
rex(48)op(89)modR/M(ec)
// 28:                          pop, rbx          
rex(48)op(8f)modR/M(c3)
// 29:                          pop, rbp          
rex(48)op(8f)modR/M(c5)
// 30:                          ret               
op(c3)
// 33: .sht.core.string.indexOpGet: 
// 34:                              push, rbp         
rex(48)op(ff)modR/M(f5)
// 35:                              push, rbx         
rex(48)op(ff)modR/M(f3)
// 36:                              mov, rbp, rsp     
rex(48)op(89)modR/M(e5)
// 37:                              sub, rsp, 40      
rex(48)op(83)modR/M(ec)i8(28)
// 38:                              mov, rbx, rcx     ; (preserve) [combiner]
rex(48)op(89)modR/M(cb)
// 39:                              mov, rcx, [rbx+8] ; shape:hoist addrOf from call
rex(48)op(8b)modR/M(4b)d8(08)
// 40:                              call, ._strgidx   ; (call label)
op(e8)co32(00-00-00-00)
// 41:                              add, rsp, 40      
rex(48)op(81)modR/M(c4)i32(28-00-00-00)
// 42:                              mov, rsp, rbp     
rex(48)op(89)modR/M(ec)
// 43:                              pop, rbx          
rex(48)op(8f)modR/M(c3)
// 44:                              pop, rbp          
rex(48)op(8f)modR/M(c5)
// 45:                              ret               
op(c3)
// 48: .sht.core.string.indexOpSet: 
// 49:                              push, rbp         
rex(48)op(ff)modR/M(f5)
// 50:                              push, rbx         
rex(48)op(ff)modR/M(f3)
// 51:                              mov, rbp, rsp     
rex(48)op(89)modR/M(e5)
// 52:                              sub, rsp, 40      
rex(48)op(83)modR/M(ec)i8(28)
// 53:                              mov, rbx, rcx     ; (preserve) [combiner]
rex(48)op(89)modR/M(cb)
// 54:                              mov, rcx, [rbx+8] ; shape:hoist addrOf from call
rex(48)op(8b)modR/M(4b)d8(08)
// 55:                              call, ._strsidx   ; (call label)
op(e8)co32(00-00-00-00)
// 56:                              add, rsp, 40      
rex(48)op(81)modR/M(c4)i32(28-00-00-00)
// 57:                              mov, rsp, rbp     
rex(48)op(89)modR/M(ec)
// 58:                              pop, rbx          
rex(48)op(8f)modR/M(c3)
// 59:                              pop, rbp          
rex(48)op(8f)modR/M(c5)
// 60:                              ret               
op(c3)
// 63: .sht.core.string.cctor: 
// 64:                         push, rbp       
rex(48)op(ff)modR/M(f5)
// 65:                         mov, rbp, rsp   
rex(48)op(89)modR/M(e5)
// 66:                         mov, [rcx+8], 0 ; =
rex(48)op(c7)modR/M(41)d8(08)i32(00-00-00-00)
// 67:                         mov, rsp, rbp   
rex(48)op(89)modR/M(ec)
// 68:                         pop, rbp        
rex(48)op(8f)modR/M(c5)
// 69:                         ret             
op(c3)
// 72: .sht.core.string.cdtor: 
// 73:                         push, rbp
rex(48)op(ff)modR/M(f5)
// 74:                         mov, rbp, rsp
rex(48)op(89)modR/M(e5)
// 75:                         mov, rsp, rbp
rex(48)op(89)modR/M(ec)
// 76:                         pop, rbp
rex(48)op(8f)modR/M(c5)
// 77:                         ret
op(c3)
// 80: .sht.core.string_vtbl_inst:
// 83: .sht.core.string_sctor: 
// 84:                         push, rbp                                     
rex(48)op(ff)modR/M(f5)
// 85:                         push, rbx                                     
rex(48)op(ff)modR/M(f3)
// 86:                         mov, rbp, rsp                                 
rex(48)op(89)modR/M(e5)
// 87:                         sub, rsp, 40                                  
rex(48)op(83)modR/M(ec)i8(28)
// 88:                         call, .sht.core.object_sctor                  ; (call label)
op(e8)co32(00-00-00-00)
// 89:                         add, rsp, 40                                  
rex(48)op(81)modR/M(c4)i32(28-00-00-00)
// 90:                         lea, rbx, qwordptr .sht.core.string_vtbl_inst 
rex(48)op(8d)modR/M(1d)disp32toLabel(00-00-00-00)
// 91:                         mov, [rcx], rbx                               ; =
rex(48)op(89)modR/M(19)
// 92:                         sub, rsp, 40                                  
rex(48)op(83)modR/M(ec)i8(28)
// 93:                         call, .sht.core.string.cctor                  ; (call label)
op(e8)co32(00-00-00-00)
// 94:                         add, rsp, 40                                  
rex(48)op(81)modR/M(c4)i32(28-00-00-00)
// 95:                         mov, rsp, rbp                                 
rex(48)op(89)modR/M(ec)
// 96:                         pop, rbx                                      
rex(48)op(8f)modR/M(c3)
// 97:                         pop, rbp                                      
rex(48)op(8f)modR/M(c5)
// 98:                         ret                                           
op(c3)
// 101: .sht.core.string_sdtor: 
// 102:                         push, rbp                                     
rex(48)op(ff)modR/M(f5)
// 103:                         push, rbx                                     
rex(48)op(ff)modR/M(f3)
// 104:                         mov, rbp, rsp                                 
rex(48)op(89)modR/M(e5)
// 105:                         lea, rbx, qwordptr .sht.core.string_vtbl_inst 
rex(48)op(8d)modR/M(1d)disp32toLabel(00-00-00-00)
// 106:                         mov, [rcx], rbx                               ; =
rex(48)op(89)modR/M(19)
// 107:                         sub, rsp, 40                                  
rex(48)op(83)modR/M(ec)i8(28)
// 108:                         call, .sht.core.string.cdtor                  ; (call label)
op(e8)co32(00-00-00-00)
// 109:                         add, rsp, 40                                  
rex(48)op(81)modR/M(c4)i32(28-00-00-00)
// 110:                         sub, rsp, 40                                  
rex(48)op(83)modR/M(ec)i8(28)
// 111:                         call, .sht.core.object_sdtor                  ; (call label)
op(e8)co32(00-00-00-00)
// 112:                         add, rsp, 40                                  
rex(48)op(81)modR/M(c4)i32(28-00-00-00)
// 113:                         mov, rsp, rbp                                 
rex(48)op(89)modR/M(ec)
// 114:                         pop, rbx                                      
rex(48)op(8f)modR/M(c3)
// 115:                         pop, rbp                                      
rex(48)op(8f)modR/M(c5)
// 116:                         ret                                           
op(c3)
