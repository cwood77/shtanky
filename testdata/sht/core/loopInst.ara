abstract loopInstBase {

   public setDir(up : bool) : void
   {
   }

   public getCount() : int
   {
   }

   public virtual bump() : void
   {
   }

   public break() : void
   {
   }

   public breakWithReason(reason : str) : void
   {
   }

   public continue() : void
   {
   }

}

class forLoopInst : loopInstBase {

   public setBounds(start : int, stop : int) : void
   {
   }

   public inBounds() : bool
   {
   }

   public getValue() : int
   {
   }

}

class whileLoopInst : loopInstBase {

   public getValue() : int
   {
   }

}

// need some enumerable interface...?
// need basecall to impl bump()
generic<T>
class forEachLoopInst : loopInstBase {

   override bump() : void
   {
   }

   // different signature!
   public getValue() : T
   {
   }

}
