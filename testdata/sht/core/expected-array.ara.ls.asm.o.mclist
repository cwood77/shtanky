// 2: .sht.core.array<.sht.core.string>.resize: 
// 3:                                           push, rbp          
rex(48)op(ff)modR/M(f5)
// 4:                                           push, rbx          
rex(48)op(ff)modR/M(f3)
// 5:                                           push, rdi          
rex(48)op(ff)modR/M(f7)
// 6:                                           mov, rbp, rsp      
rex(48)op(89)modR/M(e5)
// 7:                                           sub, rsp, 32       ; 32 = (passing size)32 + (align pad)0
rex(48)op(83)modR/M(ec)i8(20)
// 8:                                           mov, rbx, rcx      ; (preserve) [combiner]
rex(48)op(89)modR/M(cb)
// 9:                                           mov, rcx, [rbx+16] ; shape:hoist addrOf from call
rex(48)op(8b)modR/M(4b)d8(10)
// 10:                                           mov, rdi, rdx      ; (preserve) [combiner]
rex(48)op(89)modR/M(d7)
// 11:                                           mov, rdx, [rbx+8]  ; shape:hoist addrOf from call
rex(48)op(8b)modR/M(53)d8(08)
// 12:                                           mov, r8, rdi       ;       (size req for r8) [splitter]
rex(49)op(89)modR/M(f8)
// 13:                                           call, ._arrresize  ; (call label)
op(e8)co32(00-00-00-00)
// 14:                                           add, rsp, 32       ; 32 = (passing size)32 + (align pad)0
rex(48)op(81)modR/M(c4)i32(20-00-00-00)
// 15:                                           mov, [rbx+16], rax ; =
rex(48)op(89)modR/M(43)d8(10)
// 16:                                           mov, [rbx+8], r8   ; =
rex(4c)op(89)modR/M(43)d8(08)
// 17:                                           mov, rsp, rbp      
rex(48)op(89)modR/M(ec)
// 18:                                           pop, rdi           
rex(48)op(8f)modR/M(c7)
// 19:                                           pop, rbx           
rex(48)op(8f)modR/M(c3)
// 20:                                           pop, rbp           
rex(48)op(8f)modR/M(c5)
// 21:                                           ret                
op(c3)
// 24: .sht.core.array<.sht.core.string>.getLength: 
// 25:                                              push, rbp
rex(48)op(ff)modR/M(f5)
// 26:                                              mov, rbp, rsp
rex(48)op(89)modR/M(e5)
// 27:                                              mov, rsp, rbp
rex(48)op(89)modR/M(ec)
// 28:                                              pop, rbp
rex(48)op(8f)modR/M(c5)
// 29:                                              ret
op(c3)
// 32: .sht.core.array<.sht.core.string>.append: 
// 33:                                           push, rbp
rex(48)op(ff)modR/M(f5)
// 34:                                           mov, rbp, rsp
rex(48)op(89)modR/M(e5)
// 35:                                           mov, rsp, rbp
rex(48)op(89)modR/M(ec)
// 36:                                           pop, rbp
rex(48)op(8f)modR/M(c5)
// 37:                                           ret
op(c3)
// 40: .sht.core.array<.sht.core.string>.indexOpGet: 
// 41:                                               push, rbp          
rex(48)op(ff)modR/M(f5)
// 42:                                               push, rbx          
rex(48)op(ff)modR/M(f3)
// 43:                                               mov, rbp, rsp      
rex(48)op(89)modR/M(e5)
// 44:                                               sub, rsp, 40       ; 40 = (passing size)32 + (align pad)8
rex(48)op(83)modR/M(ec)i8(28)
// 45:                                               mov, rbx, rcx      ; (preserve) [combiner]
rex(48)op(89)modR/M(cb)
// 46:                                               mov, rcx, [rbx+16] ; shape:hoist addrOf from call
rex(48)op(8b)modR/M(4b)d8(10)
// 47:                                               call, ._arrgidx    ; (call label)
op(e8)co32(00-00-00-00)
// 48:                                               add, rsp, 40       ; 40 = (passing size)32 + (align pad)8
rex(48)op(81)modR/M(c4)i32(28-00-00-00)
// 49:                                               mov, rsp, rbp      
rex(48)op(89)modR/M(ec)
// 50:                                               pop, rbx           
rex(48)op(8f)modR/M(c3)
// 51:                                               pop, rbp           
rex(48)op(8f)modR/M(c5)
// 52:                                               ret                
op(c3)
// 55: .sht.core.array<.sht.core.string>.indexOpSet: 
// 56:                                               push, rbp          
rex(48)op(ff)modR/M(f5)
// 57:                                               push, rbx          
rex(48)op(ff)modR/M(f3)
// 58:                                               mov, rbp, rsp      
rex(48)op(89)modR/M(e5)
// 59:                                               sub, rsp, 40       ; 40 = (passing size)32 + (align pad)8
rex(48)op(83)modR/M(ec)i8(28)
// 60:                                               mov, rbx, rcx      ; (preserve) [combiner]
rex(48)op(89)modR/M(cb)
// 61:                                               mov, rcx, [rbx+16] ; shape:hoist addrOf from call
rex(48)op(8b)modR/M(4b)d8(10)
// 62:                                               call, ._arrsidx    ; (call label)
op(e8)co32(00-00-00-00)
// 63:                                               add, rsp, 40       ; 40 = (passing size)32 + (align pad)8
rex(48)op(81)modR/M(c4)i32(28-00-00-00)
// 64:                                               mov, rsp, rbp      
rex(48)op(89)modR/M(ec)
// 65:                                               pop, rbx           
rex(48)op(8f)modR/M(c3)
// 66:                                               pop, rbp           
rex(48)op(8f)modR/M(c5)
// 67:                                               ret                
op(c3)
// 70: .sht.core.array<.sht.core.string>.cctor: 
// 71:                                          push, rbp        
rex(48)op(ff)modR/M(f5)
// 72:                                          mov, rbp, rsp    
rex(48)op(89)modR/M(e5)
// 73:                                          mov, [rcx+8], 0  ; =
rex(48)op(c7)modR/M(41)d8(08)i32(00-00-00-00)
// 74:                                          mov, [rcx+16], 0 ; =
rex(48)op(c7)modR/M(41)d8(10)i32(00-00-00-00)
// 75:                                          mov, rsp, rbp    
rex(48)op(89)modR/M(ec)
// 76:                                          pop, rbp         
rex(48)op(8f)modR/M(c5)
// 77:                                          ret              
op(c3)
// 80: .sht.core.array<.sht.core.string>.cdtor: 
// 81:                                          push, rbp
rex(48)op(ff)modR/M(f5)
// 82:                                          mov, rbp, rsp
rex(48)op(89)modR/M(e5)
// 83:                                          mov, rsp, rbp
rex(48)op(89)modR/M(ec)
// 84:                                          pop, rbp
rex(48)op(8f)modR/M(c5)
// 85:                                          ret
op(c3)
// 88: .sht.core.array<.sht.core.string>_vtbl_inst:
// 91: .sht.core.array<.sht.core.string>_sctor: 
// 92:                                          push, rbp                                                      
rex(48)op(ff)modR/M(f5)
// 93:                                          push, rbx                                                      
rex(48)op(ff)modR/M(f3)
// 94:                                          mov, rbp, rsp                                                  
rex(48)op(89)modR/M(e5)
// 95:                                          sub, rsp, 40                                                   ; 40 = (passing size)32 + (align pad)8
rex(48)op(83)modR/M(ec)i8(28)
// 96:                                          call, .sht.core.object_sctor                                   ; (call label)
op(e8)co32(00-00-00-00)
// 97:                                          add, rsp, 40                                                   ; 40 = (passing size)32 + (align pad)8
rex(48)op(81)modR/M(c4)i32(28-00-00-00)
// 98:                                          lea, rbx, qwordptr .sht.core.array<.sht.core.string>_vtbl_inst 
rex(48)op(8d)modR/M(1d)disp32toLabel(00-00-00-00)
// 99:                                          mov, [rcx], rbx                                                ; =
rex(48)op(89)modR/M(19)
// 100:                                          sub, rsp, 40                                                   ; 40 = (passing size)32 + (align pad)8
rex(48)op(83)modR/M(ec)i8(28)
// 101:                                          call, .sht.core.array<.sht.core.string>.cctor                  ; (call label)
op(e8)co32(00-00-00-00)
// 102:                                          add, rsp, 40                                                   ; 40 = (passing size)32 + (align pad)8
rex(48)op(81)modR/M(c4)i32(28-00-00-00)
// 103:                                          mov, rsp, rbp                                                  
rex(48)op(89)modR/M(ec)
// 104:                                          pop, rbx                                                       
rex(48)op(8f)modR/M(c3)
// 105:                                          pop, rbp                                                       
rex(48)op(8f)modR/M(c5)
// 106:                                          ret                                                            
op(c3)
// 109: .sht.core.array<.sht.core.string>_sdtor: 
// 110:                                          push, rbp                                                      
rex(48)op(ff)modR/M(f5)
// 111:                                          push, rbx                                                      
rex(48)op(ff)modR/M(f3)
// 112:                                          mov, rbp, rsp                                                  
rex(48)op(89)modR/M(e5)
// 113:                                          lea, rbx, qwordptr .sht.core.array<.sht.core.string>_vtbl_inst 
rex(48)op(8d)modR/M(1d)disp32toLabel(00-00-00-00)
// 114:                                          mov, [rcx], rbx                                                ; =
rex(48)op(89)modR/M(19)
// 115:                                          sub, rsp, 40                                                   ; 40 = (passing size)32 + (align pad)8
rex(48)op(83)modR/M(ec)i8(28)
// 116:                                          call, .sht.core.array<.sht.core.string>.cdtor                  ; (call label)
op(e8)co32(00-00-00-00)
// 117:                                          add, rsp, 40                                                   ; 40 = (passing size)32 + (align pad)8
rex(48)op(81)modR/M(c4)i32(28-00-00-00)
// 118:                                          sub, rsp, 40                                                   ; 40 = (passing size)32 + (align pad)8
rex(48)op(83)modR/M(ec)i8(28)
// 119:                                          call, .sht.core.object_sdtor                                   ; (call label)
op(e8)co32(00-00-00-00)
// 120:                                          add, rsp, 40                                                   ; 40 = (passing size)32 + (align pad)8
rex(48)op(81)modR/M(c4)i32(28-00-00-00)
// 121:                                          mov, rsp, rbp                                                  
rex(48)op(89)modR/M(ec)
// 122:                                          pop, rbx                                                       
rex(48)op(8f)modR/M(c3)
// 123:                                          pop, rbp                                                       
rex(48)op(8f)modR/M(c5)
// 124:                                          ret                                                            
op(c3)
