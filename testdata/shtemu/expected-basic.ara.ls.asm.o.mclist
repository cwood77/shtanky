// 2: ._strLit_startingProgra_etc_0:
// 3: .data, "starting program" <b> 0 
_strdata(73-74-61-72,74-69-6e-67,20-70-72-6f,67-72-61-6d)_intdata(00)
// 6: ._strLit_insideLoop_1:
// 7: .data, "inside loop" <b> 0 
_strdata(69-6e-73-69,64-65-20-6c,6f-6f-70)_intdata(00)
// 10: ._strLit_leavingProgram_2:
// 11: .data, "leaving program" <b> 0 
_strdata(6c-65-61-76,69-6e-67-20,70-72-6f-67,72-61-6d)_intdata(00)
// 14: .shtemu.foo.run:                 
// 15:                                  push, rbp                                        
rex(48)op(ff)modR/M(f5)
// 16:                                  push, rbx                                        
rex(48)op(ff)modR/M(f3)
// 17:                                  mov, rbp, rsp                                    
rex(48)op(89)modR/M(e5)
// 18:                                  sub, rsp, 24                                     
rex(48)op(83)modR/M(ec)i8(18)
// 19:                                  sub, rsp, 32                                     
rex(48)op(83)modR/M(ec)i8(20)
// 20:                                  lea, rcx, qwordptr ._strLit_startingProgra_etc_0 
rex(48)op(8d)modR/M(0d)disp32toLabel(00-00-00-00)
// 21:                                  call, ._print                                    ; (call label)
op(e8)co32(00-00-00-00)
// 22:                                  add, rsp, 32                                     
rex(48)op(81)modR/M(c4)i32(20-00-00-00)
// 23:                                  lea, rcx, [rbp-24]                               ; i
rex(48)op(8d)modR/M(4d)d8(e8)
// 24:                                  sub, rsp, 32                                     
rex(48)op(83)modR/M(ec)i8(20)
// 25:                                  call, .sht.core.whileLoopInst_sctor              ; (call label)
op(e8)co32(00-00-00-00)
// 26:                                  add, rsp, 32                                     
rex(48)op(81)modR/M(c4)i32(20-00-00-00)
// 27:                                  goto, .shtemu.foo.run.loop_i_15_start            ; label decomp
op(e9)co32(00-00-00-00)
// 29: .shtemu.foo.run.loop_i_15_start: 
// 30:                                  sub, rsp, 32                                     
rex(48)op(83)modR/M(ec)i8(20)
// 31:                                  call, .sht.core.whileLoopInst.getValue           ; (call label)
op(e8)co32(00-00-00-00)
// 32:                                  add, rsp, 32                                     
rex(48)op(81)modR/M(c4)i32(20-00-00-00)
// 33:                                  xor, rbx, rbx                                    
rex(48)op(31)modR/M(db)
// 34:                                  cmp, rax, 2                                      
rex(48)op(81)modR/M(f8)i32(02-00-00-00)
// 35:                                  setlts, rbx                                      
rex(48)op(0f-9c)modR/M(c3)
// 36:                                  cmp, rbx, 0                                      
rex(48)op(81)modR/M(fb)i32(00-00-00-00)
// 37:                                  je, .shtemu.foo.run.else.0                       
op(0f-84)co32(00-00-00-00)
// 38:                                  goto, .shtemu.foo.run.endif.1                    
op(e9)co32(00-00-00-00)
// 40: .shtemu.foo.run.else.0:          
// 41:                                  goto, .shtemu.foo.run.loop_i_15_end              
op(e9)co32(00-00-00-00)
// 42:                                  goto, .shtemu.foo.run.endif.1                    
op(e9)co32(00-00-00-00)
// 44: .shtemu.foo.run.endif.1:         
// 45:                                  sub, rsp, 32                                     
rex(48)op(83)modR/M(ec)i8(20)
// 46:                                  mov, rbx, rcx                                    ; (preserve) [combiner]
rex(48)op(89)modR/M(cb)
// 47:                                  lea, rcx, qwordptr ._strLit_insideLoop_1         
rex(48)op(8d)modR/M(0d)disp32toLabel(00-00-00-00)
// 48:                                  call, ._print                                    ; (call label)
op(e8)co32(00-00-00-00)
// 49:                                  add, rsp, 32                                     
rex(48)op(81)modR/M(c4)i32(20-00-00-00)
// 50:                                  sub, rsp, 32                                     
rex(48)op(83)modR/M(ec)i8(20)
// 51:                                  mov, rcx, rbx                                    ; (restore [combiner])
rex(48)op(89)modR/M(d9)
// 52:                                  call, [rcx]                                      ; vtbl call to .sht.core.whileLoopInst_vtbl::bump
rex(48)op(ff)modR/M(11)
// 53:                                  add, rsp, 32                                     
rex(48)op(81)modR/M(c4)i32(20-00-00-00)
// 54:                                  goto, .shtemu.foo.run.loop_i_15_start            
op(e9)co32(00-00-00-00)
// 56: .shtemu.foo.run.loop_i_15_end:   
// 57:                                  sub, rsp, 32                                     
rex(48)op(83)modR/M(ec)i8(20)
// 58:                                  call, .sht.core.whileLoopInst_sdtor              ; (call label)
op(e8)co32(00-00-00-00)
// 59:                                  add, rsp, 32                                     
rex(48)op(81)modR/M(c4)i32(20-00-00-00)
// 60:                                  sub, rsp, 32                                     
rex(48)op(83)modR/M(ec)i8(20)
// 61:                                  lea, rcx, qwordptr ._strLit_leavingProgram_2     
rex(48)op(8d)modR/M(0d)disp32toLabel(00-00-00-00)
// 62:                                  call, ._print                                    ; (call label)
op(e8)co32(00-00-00-00)
// 63:                                  add, rsp, 32                                     
rex(48)op(81)modR/M(c4)i32(20-00-00-00)
// 64:                                  mov, rsp, rbp                                    
rex(48)op(89)modR/M(ec)
// 65:                                  pop, rbx                                         
rex(48)op(8f)modR/M(c3)
// 66:                                  pop, rbp                                         
rex(48)op(8f)modR/M(c5)
// 67:                                  ret                                              
op(c3)
// 70: .shtemu.foo.cctor: 
// 71:                    push, rbp
rex(48)op(ff)modR/M(f5)
// 72:                    mov, rbp, rsp
rex(48)op(89)modR/M(e5)
// 73:                    mov, rsp, rbp
rex(48)op(89)modR/M(ec)
// 74:                    pop, rbp
rex(48)op(8f)modR/M(c5)
// 75:                    ret
op(c3)
// 78: .shtemu.foo.cdtor: 
// 79:                    push, rbp
rex(48)op(ff)modR/M(f5)
// 80:                    mov, rbp, rsp
rex(48)op(89)modR/M(e5)
// 81:                    mov, rsp, rbp
rex(48)op(89)modR/M(ec)
// 82:                    pop, rbp
rex(48)op(8f)modR/M(c5)
// 83:                    ret
op(c3)
// 86: .shtemu.foo_vtbl_inst: 
// 87:                        goto, .shtemu.foo.run
op(e9)co32(00-00-00-00)
// 90: .shtemu.foo_sctor: 
// 91:                    push, rbp                                
rex(48)op(ff)modR/M(f5)
// 92:                    push, rbx                                
rex(48)op(ff)modR/M(f3)
// 93:                    mov, rbp, rsp                            
rex(48)op(89)modR/M(e5)
// 94:                    sub, rsp, 32                             
rex(48)op(83)modR/M(ec)i8(20)
// 95:                    call, .sht.cons.program_sctor            ; (call label)
op(e8)co32(00-00-00-00)
// 96:                    add, rsp, 32                             
rex(48)op(81)modR/M(c4)i32(20-00-00-00)
// 97:                    lea, rbx, qwordptr .shtemu.foo_vtbl_inst 
rex(48)op(8d)modR/M(1d)disp32toLabel(00-00-00-00)
// 98:                    mov, [rcx], rbx                          ; =
rex(48)op(89)modR/M(19)
// 99:                    sub, rsp, 32                             
rex(48)op(83)modR/M(ec)i8(20)
// 100:                    call, .shtemu.foo.cctor                  ; (call label)
op(e8)co32(00-00-00-00)
// 101:                    add, rsp, 32                             
rex(48)op(81)modR/M(c4)i32(20-00-00-00)
// 102:                    mov, rsp, rbp                            
rex(48)op(89)modR/M(ec)
// 103:                    pop, rbx                                 
rex(48)op(8f)modR/M(c3)
// 104:                    pop, rbp                                 
rex(48)op(8f)modR/M(c5)
// 105:                    ret                                      
op(c3)
// 108: .shtemu.foo_sdtor: 
// 109:                    push, rbp                                
rex(48)op(ff)modR/M(f5)
// 110:                    push, rbx                                
rex(48)op(ff)modR/M(f3)
// 111:                    mov, rbp, rsp                            
rex(48)op(89)modR/M(e5)
// 112:                    lea, rbx, qwordptr .shtemu.foo_vtbl_inst 
rex(48)op(8d)modR/M(1d)disp32toLabel(00-00-00-00)
// 113:                    mov, [rcx], rbx                          ; =
rex(48)op(89)modR/M(19)
// 114:                    sub, rsp, 32                             
rex(48)op(83)modR/M(ec)i8(20)
// 115:                    call, .shtemu.foo.cdtor                  ; (call label)
op(e8)co32(00-00-00-00)
// 116:                    add, rsp, 32                             
rex(48)op(81)modR/M(c4)i32(20-00-00-00)
// 117:                    sub, rsp, 32                             
rex(48)op(83)modR/M(ec)i8(20)
// 118:                    call, .sht.cons.program_sdtor            ; (call label)
op(e8)co32(00-00-00-00)
// 119:                    add, rsp, 32                             
rex(48)op(81)modR/M(c4)i32(20-00-00-00)
// 120:                    mov, rsp, rbp                            
rex(48)op(89)modR/M(ec)
// 121:                    pop, rbx                                 
rex(48)op(8f)modR/M(c3)
// 122:                    pop, rbp                                 
rex(48)op(8f)modR/M(c5)
// 123:                    ret                                      
op(c3)
