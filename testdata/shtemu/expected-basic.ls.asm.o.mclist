// 2: .const0:
// 3: .data, "hello world!" <b> 0 
_strdata(68-65-6c-6c,6f-20-77-6f,72-6c-64-21)_intdata(00)
// 6: .entrypoint:         
// 7:                      push, rbp                  
rex(48)op(ff)modR/M(f5)
// 8:                      push, rbx                  
rex(48)op(ff)modR/M(f3)
// 9:                      mov, rbp, rsp              
rex(48)op(89)modR/M(e5)
// 10:                      mov, r10, 0                ; codeshape decomp
rex(49)op(ba)i64(00-00-00-00,00-00-00-00)
// 11:                      cmp, r10, 7                
rex(49)op(81)modR/M(fa)i32(07-00-00-00)
// 12:                      setlts, rbx                
rex(48)op(0f-9c)modR/M(c3)
// 13:                      cmp, rbx, 0                
rex(48)op(81)modR/M(fb)i32(00-00-00-00)
// 14:                      je, .entrypoint.else.0     
op(0f-84)co32(00-00-00-00)
// 15:                      sub, rsp, 32               
rex(48)op(83)modR/M(ec)i8(20)
// 16:                      lea, rdx, qwordptr .const0 
rex(48)op(8d)modR/M(15)disp32toLabel(00-00-00-00)
// 17:                      mov, rcx, 1                ; shape:hoist imm from call
rex(48)op(b9)i64(01-00-00-00,00-00-00-00)
// 18:                      call, ._osCall             ; (call label)
op(e8)co32(00-00-00-00)
// 19:                      add, rsp, 32               
rex(48)op(81)modR/M(c4)i32(20-00-00-00)
// 20:                      goto, .entrypoint.endif.1  
op(e9)co32(00-00-00-00)
// 22: .entrypoint.else.0:  
// 23:                      mov, r10, 0                ; codeshape decomp
rex(49)op(ba)i64(00-00-00-00,00-00-00-00)
// 24:                      cmp, r10, 0                
rex(49)op(81)modR/M(fa)i32(00-00-00-00)
// 25:                      je, .entrypoint.else.2     
op(0f-84)co32(00-00-00-00)
// 26:                      sub, rsp, 32               
rex(48)op(83)modR/M(ec)i8(20)
// 27:                      lea, rdx, qwordptr .const0 
rex(48)op(8d)modR/M(15)disp32toLabel(00-00-00-00)
// 28:                      mov, rcx, 1                ; shape:hoist imm from call
rex(48)op(b9)i64(01-00-00-00,00-00-00-00)
// 29:                      call, ._osCall             ; (call label)
op(e8)co32(00-00-00-00)
// 30:                      add, rsp, 32               
rex(48)op(81)modR/M(c4)i32(20-00-00-00)
// 31:                      goto, .entrypoint.endif.3  
op(e9)co32(00-00-00-00)
// 33: .entrypoint.else.2:  
// 34:                      sub, rsp, 32               
rex(48)op(83)modR/M(ec)i8(20)
// 35:                      lea, rdx, qwordptr .const0 
rex(48)op(8d)modR/M(15)disp32toLabel(00-00-00-00)
// 36:                      mov, rcx, 1                ; shape:hoist imm from call
rex(48)op(b9)i64(01-00-00-00,00-00-00-00)
// 37:                      call, ._osCall             ; (call label)
op(e8)co32(00-00-00-00)
// 38:                      add, rsp, 32               
rex(48)op(81)modR/M(c4)i32(20-00-00-00)
// 39:                      goto, .entrypoint.endif.3  
op(e9)co32(00-00-00-00)
// 41: .entrypoint.endif.3: 
// 42:                      goto, .entrypoint.endif.1  
op(e9)co32(00-00-00-00)
// 44: .entrypoint.endif.1: 
// 45:                      mov, rsp, rbp              
rex(48)op(89)modR/M(ec)
// 46:                      pop, rbx                   
rex(48)op(8f)modR/M(c3)
// 47:                      pop, rbp                   
rex(48)op(8f)modR/M(c5)
// 48:                      ret                        
op(c3)
