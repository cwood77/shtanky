// 2: .zero:
// 3: .data, "0" <b> 0 
_strdata(30)_intdata(00)
// 6: .one:
// 7: .data, "1" <b> 0 
_strdata(31)_intdata(00)
// 10: .other:
// 11: .data, "other!" <b> 0 
_strdata(6f-74-68-65,72-21)_intdata(00)
// 14: .entrypoint:         
// 15:                      push, rbp                 
rex(48)op(ff)modR/M(f5)
// 16:                      push, rbx                 
rex(48)op(ff)modR/M(f3)
// 17:                      mov, rbp, rsp             
rex(48)op(89)modR/M(e5)
// 18:                      sub, rsp, 8               
rex(48)op(83)modR/M(ec)i8(08)
// 19:                      sub, rsp, 32              
rex(48)op(83)modR/M(ec)i8(20)
// 20:                      mov, rcx, 8               ; shape:hoist imm from call
rex(48)op(b9)i64(08-00-00-00,00-00-00-00)
// 21:                      call, ._getflg            ; (call label)
op(e8)co32(00-00-00-00)
// 22:                      add, rsp, 32              
rex(48)op(81)modR/M(c4)i32(20-00-00-00)
// 23:                      mov, [rbp-8], rax         ; =
rex(48)op(89)modR/M(45)d8(f8)
// 24:                      xor, rbx, rbx             
rex(48)op(31)modR/M(db)
// 25:                      cmp, [rbp-8], 1           
rex(48)op(81)modR/M(7d)d8(f8)i32(01-00-00-00)
// 26:                      setlts, rbx               
rex(48)op(0f-9c)modR/M(c3)
// 27:                      cmp, rbx, 0               
rex(48)op(81)modR/M(fb)i32(00-00-00-00)
// 28:                      je, .entrypoint.else.0    
op(0f-84)co32(00-00-00-00)
// 29:                      sub, rsp, 32              
rex(48)op(83)modR/M(ec)i8(20)
// 30:                      lea, rcx, qwordptr .zero  
rex(48)op(8d)modR/M(0d)disp32toLabel(00-00-00-00)
// 31:                      call, ._print             ; (call label)
op(e8)co32(00-00-00-00)
// 32:                      add, rsp, 32              
rex(48)op(81)modR/M(c4)i32(20-00-00-00)
// 33:                      goto, .entrypoint.endif.1 
op(e9)co32(00-00-00-00)
// 35: .entrypoint.else.0:  
// 36:                      xor, rbx, rbx             
rex(48)op(31)modR/M(db)
// 37:                      cmp, [rbp-8], 2           
rex(48)op(81)modR/M(7d)d8(f8)i32(02-00-00-00)
// 38:                      setlts, rbx               
rex(48)op(0f-9c)modR/M(c3)
// 39:                      cmp, rbx, 0               
rex(48)op(81)modR/M(fb)i32(00-00-00-00)
// 40:                      je, .entrypoint.else.2    
op(0f-84)co32(00-00-00-00)
// 41:                      sub, rsp, 32              
rex(48)op(83)modR/M(ec)i8(20)
// 42:                      lea, rcx, qwordptr .one   
rex(48)op(8d)modR/M(0d)disp32toLabel(00-00-00-00)
// 43:                      call, ._print             ; (call label)
op(e8)co32(00-00-00-00)
// 44:                      add, rsp, 32              
rex(48)op(81)modR/M(c4)i32(20-00-00-00)
// 45:                      goto, .entrypoint.endif.3 
op(e9)co32(00-00-00-00)
// 47: .entrypoint.else.2:  
// 48:                      sub, rsp, 32              
rex(48)op(83)modR/M(ec)i8(20)
// 49:                      lea, rcx, qwordptr .other 
rex(48)op(8d)modR/M(0d)disp32toLabel(00-00-00-00)
// 50:                      call, ._print             ; (call label)
op(e8)co32(00-00-00-00)
// 51:                      add, rsp, 32              
rex(48)op(81)modR/M(c4)i32(20-00-00-00)
// 52:                      goto, .entrypoint.endif.3 
op(e9)co32(00-00-00-00)
// 54: .entrypoint.endif.3: 
// 55:                      goto, .entrypoint.endif.1 
op(e9)co32(00-00-00-00)
// 57: .entrypoint.endif.1: 
// 58:                      mov, rsp, rbp             
rex(48)op(89)modR/M(ec)
// 59:                      pop, rbx                  
rex(48)op(8f)modR/M(c3)
// 60:                      pop, rbp                  
rex(48)op(8f)modR/M(c5)
// 61:                      ret                       
op(c3)
