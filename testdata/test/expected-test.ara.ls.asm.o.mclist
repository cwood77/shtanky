// 2: .const0:
// 3: .data, "hello world!" <b> 0 
_strdata(68-65-6c-6c,6f-20-77-6f,72-6c-64-21)_intdata(00)
// 6: .test.test.run: 
// 7:                 push, rbp                  
rex(48)op(ff)modR/M(f5)
// 8:                 push, rbx                  
rex(48)op(ff)modR/M(f3)
// 9:                 push, rdi                  
rex(48)op(ff)modR/M(f7)
// 10:                 mov, rbp, rsp              
rex(48)op(89)modR/M(e5)
// 11:                 sub, rsp, 32               
rex(48)op(83)modR/M(ec)i8(20)
// 12:                 mov, rbx, [rcx+8]          ; fieldaccess: owner of _vtbl
rex(48)op(8b)modR/M(59)d8(08)
// 13:                 mov, rdi, [rbx]            ; fieldaccess: owner of printLn
rex(48)op(8b)modR/M(3b)
// 14:                 lea, rdx, qwordptr .const0 
rex(48)op(8d)modR/M(15)disp32toLabel(00-00-00-00)
// 15:                 mov, rbx, rcx              ; (preserve) [combiner]
rex(48)op(89)modR/M(cb)
// 16:                 mov, rcx, [rbx+8]          ; shape:hoist addrOf from call
rex(48)op(8b)modR/M(4b)d8(08)
// 17:                 call, [rdi]                ; (call ptr)
rex(48)op(ff)modR/M(17)
// 18:                 add, rsp, 32               
rex(48)op(81)modR/M(c4)i32(20-00-00-00)
// 19:                 mov, rsp, rbp              
rex(48)op(89)modR/M(ec)
// 20:                 pop, rdi                   
rex(48)op(8f)modR/M(c7)
// 21:                 pop, rbx                   
rex(48)op(8f)modR/M(c3)
// 22:                 pop, rbp                   
rex(48)op(8f)modR/M(c5)
// 23:                 ret                        
op(c3)
// 26: .test.test.cctor: 
// 27:                   push, rbp
rex(48)op(ff)modR/M(f5)
// 28:                   mov, rbp, rsp
rex(48)op(89)modR/M(e5)
// 29:                   mov, rsp, rbp
rex(48)op(89)modR/M(ec)
// 30:                   pop, rbp
rex(48)op(8f)modR/M(c5)
// 31:                   ret
op(c3)
// 34: .test.test.cdtor: 
// 35:                   push, rbp
rex(48)op(ff)modR/M(f5)
// 36:                   mov, rbp, rsp
rex(48)op(89)modR/M(e5)
// 37:                   mov, rsp, rbp
rex(48)op(89)modR/M(ec)
// 38:                   pop, rbp
rex(48)op(8f)modR/M(c5)
// 39:                   ret
op(c3)
// 42: .test.test_vtbl_inst: 
// 43:                       goto, .test.test.run
op(e9)co32(00-00-00-00)
// 46: .test.test_sctor: 
// 47:                   push, rbp                               
rex(48)op(ff)modR/M(f5)
// 48:                   mov, rbp, rsp                           
rex(48)op(89)modR/M(e5)
// 49:                   sub, rsp, 32                            
rex(48)op(83)modR/M(ec)i8(20)
// 50:                   call, .sht.cons.program_sctor           ; (call label)
op(e8)co32(00-00-00-00)
// 51:                   add, rsp, 32                            
rex(48)op(81)modR/M(c4)i32(20-00-00-00)
// 52:                   mov, r10, qwordptr .test.test_vtbl_inst ; codeshape decomp
rex(4c)op(8b)modR/M(15)disp32toLabel(00-00-00-00)
// 53:                   mov, [rcx], r10                         ; =
rex(4c)op(89)modR/M(11)
// 54:                   sub, rsp, 32                            
rex(48)op(83)modR/M(ec)i8(20)
// 55:                   call, .test.test.cctor                  ; (call label)
op(e8)co32(00-00-00-00)
// 56:                   add, rsp, 32                            
rex(48)op(81)modR/M(c4)i32(20-00-00-00)
// 57:                   mov, rsp, rbp                           
rex(48)op(89)modR/M(ec)
// 58:                   pop, rbp                                
rex(48)op(8f)modR/M(c5)
// 59:                   ret                                     
op(c3)
// 62: .test.test_sdtor: 
// 63:                   push, rbp                               
rex(48)op(ff)modR/M(f5)
// 64:                   mov, rbp, rsp                           
rex(48)op(89)modR/M(e5)
// 65:                   mov, r10, qwordptr .test.test_vtbl_inst ; codeshape decomp
rex(4c)op(8b)modR/M(15)disp32toLabel(00-00-00-00)
// 66:                   mov, [rcx], r10                         ; =
rex(4c)op(89)modR/M(11)
// 67:                   sub, rsp, 32                            
rex(48)op(83)modR/M(ec)i8(20)
// 68:                   call, .test.test.cdtor                  ; (call label)
op(e8)co32(00-00-00-00)
// 69:                   add, rsp, 32                            
rex(48)op(81)modR/M(c4)i32(20-00-00-00)
// 70:                   sub, rsp, 32                            
rex(48)op(83)modR/M(ec)i8(20)
// 71:                   call, .sht.cons.program_sdtor           ; (call label)
op(e8)co32(00-00-00-00)
// 72:                   add, rsp, 32                            
rex(48)op(81)modR/M(c4)i32(20-00-00-00)
// 73:                   mov, rsp, rbp                           
rex(48)op(89)modR/M(ec)
// 74:                   pop, rbp                                
rex(48)op(8f)modR/M(c5)
// 75:                   ret                                     
op(c3)
