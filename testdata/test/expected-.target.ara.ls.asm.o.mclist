// 2: .entrypoint: 
// 3:              push, rbp                    
rex(48)op(ff)modR/M(f5)
// 4:              push, rbx                    
rex(48)op(ff)modR/M(f3)
// 5:              push, rdi                    
rex(48)op(ff)modR/M(f7)
// 6:              mov, rbp, rsp                
rex(48)op(89)modR/M(e5)
// 7:              sub, rsp, 24                 
rex(48)op(83)modR/M(ec)i8(18)
// 8:              mov, rbx, rcx                ; (preserve) [combiner]
rex(48)op(89)modR/M(cb)
// 9:              lea, rcx, [rbp-8]            ; cout
rex(48)op(8d)modR/M(4d)d8(f8)
// 10:              sub, rsp, 32                 
rex(48)op(83)modR/M(ec)i8(20)
// 11:              call, .sht.cons.stdout_sctor ; (call label)
op(e8)co32(00-00-00-00)
// 12:              add, rsp, 32                 
rex(48)op(81)modR/M(c4)i32(20-00-00-00)
// 13:              mov, rdi, rcx                ; (preserve) [combiner]
rex(48)op(89)modR/M(cf)
// 14:              lea, rcx, [rbp-24]           ; obj0
rex(48)op(8d)modR/M(4d)d8(e8)
// 15:              sub, rsp, 32                 
rex(48)op(83)modR/M(ec)i8(20)
// 16:              call, .test.test_sctor       ; (call label)
op(e8)co32(00-00-00-00)
// 17:              add, rsp, 32                 
rex(48)op(81)modR/M(c4)i32(20-00-00-00)
// 18:              mov, [rcx+8], rdi            ; =
rex(48)op(89)modR/M(79)d8(08)
// 19:              sub, rsp, 32                 
rex(48)op(83)modR/M(ec)i8(20)
// 20:              mov, rbx, [rcx]              ; fieldaccess: owner of run
rex(48)op(8b)modR/M(19)
// 21:              mov, rdx, rbx                ;       (args req for rdx) [splitter]
rex(48)op(89)modR/M(da)
// 22:              call, [rbx]                  ; (call ptr)
rex(48)op(ff)modR/M(13)
// 23:              add, rsp, 32                 
rex(48)op(81)modR/M(c4)i32(20-00-00-00)
// 24:              sub, rsp, 32                 
rex(48)op(83)modR/M(ec)i8(20)
// 25:              call, .test.test_sdtor       ; (call label)
op(e8)co32(00-00-00-00)
// 26:              add, rsp, 32                 
rex(48)op(81)modR/M(c4)i32(20-00-00-00)
// 27:              sub, rsp, 32                 
rex(48)op(83)modR/M(ec)i8(20)
// 28:              mov, rcx, rdi                ; (restore [combiner])
rex(48)op(89)modR/M(f9)
// 29:              call, .sht.cons.stdout_sdtor ; (call label)
op(e8)co32(00-00-00-00)
// 30:              add, rsp, 32                 
rex(48)op(81)modR/M(c4)i32(20-00-00-00)
// 31:              mov, rsp, rbp                
rex(48)op(89)modR/M(ec)
// 32:              pop, rdi                     
rex(48)op(8f)modR/M(c7)
// 33:              pop, rbx                     
rex(48)op(8f)modR/M(c3)
// 34:              pop, rbp                     
rex(48)op(8f)modR/M(c5)
// 35:              ret                          
op(c3)
// 38: .test.consoleTarget.cctor: 
// 39:                            push, rbp
rex(48)op(ff)modR/M(f5)
// 40:                            mov, rbp, rsp
rex(48)op(89)modR/M(e5)
// 41:                            mov, rsp, rbp
rex(48)op(89)modR/M(ec)
// 42:                            pop, rbp
rex(48)op(8f)modR/M(c5)
// 43:                            ret
op(c3)
// 46: .test.consoleTarget.cdtor: 
// 47:                            push, rbp
rex(48)op(ff)modR/M(f5)
// 48:                            mov, rbp, rsp
rex(48)op(89)modR/M(e5)
// 49:                            mov, rsp, rbp
rex(48)op(89)modR/M(ec)
// 50:                            pop, rbp
rex(48)op(8f)modR/M(c5)
// 51:                            ret
op(c3)
// 54: .test.consoleTarget_vtbl_inst:
// 55: .data, 
// 58: .test.consoleTarget_sctor: 
// 59:                            push, rbp                                        
rex(48)op(ff)modR/M(f5)
// 60:                            mov, rbp, rsp                                    
rex(48)op(89)modR/M(e5)
// 61:                            sub, rsp, 32                                     
rex(48)op(83)modR/M(ec)i8(20)
// 62:                            call, .sht.core.object_sctor                     ; (call label)
op(e8)co32(00-00-00-00)
// 63:                            add, rsp, 32                                     
rex(48)op(81)modR/M(c4)i32(20-00-00-00)
// 64:                            mov, r10, qwordptr .test.consoleTarget_vtbl_inst ; codeshape decomp
rex(4c)op(8b)modR/M(15)disp32toLabel(00-00-00-00)
// 65:                            mov, [rcx], r10                                  ; =
rex(4c)op(89)modR/M(11)
// 66:                            sub, rsp, 32                                     
rex(48)op(83)modR/M(ec)i8(20)
// 67:                            call, .test.consoleTarget.cctor                  ; (call label)
op(e8)co32(00-00-00-00)
// 68:                            add, rsp, 32                                     
rex(48)op(81)modR/M(c4)i32(20-00-00-00)
// 69:                            mov, rsp, rbp                                    
rex(48)op(89)modR/M(ec)
// 70:                            pop, rbp                                         
rex(48)op(8f)modR/M(c5)
// 71:                            ret                                              
op(c3)
// 74: .test.consoleTarget_sdtor: 
// 75:                            push, rbp                                        
rex(48)op(ff)modR/M(f5)
// 76:                            mov, rbp, rsp                                    
rex(48)op(89)modR/M(e5)
// 77:                            mov, r10, qwordptr .test.consoleTarget_vtbl_inst ; codeshape decomp
rex(4c)op(8b)modR/M(15)disp32toLabel(00-00-00-00)
// 78:                            mov, [rcx], r10                                  ; =
rex(4c)op(89)modR/M(11)
// 79:                            sub, rsp, 32                                     
rex(48)op(83)modR/M(ec)i8(20)
// 80:                            call, .test.consoleTarget.cdtor                  ; (call label)
op(e8)co32(00-00-00-00)
// 81:                            add, rsp, 32                                     
rex(48)op(81)modR/M(c4)i32(20-00-00-00)
// 82:                            sub, rsp, 32                                     
rex(48)op(83)modR/M(ec)i8(20)
// 83:                            call, .sht.core.object_sdtor                     ; (call label)
op(e8)co32(00-00-00-00)
// 84:                            add, rsp, 32                                     
rex(48)op(81)modR/M(c4)i32(20-00-00-00)
// 85:                            mov, rsp, rbp                                    
rex(48)op(89)modR/M(ec)
// 86:                            pop, rbp                                         
rex(48)op(8f)modR/M(c5)
// 87:                            ret                                              
op(c3)
