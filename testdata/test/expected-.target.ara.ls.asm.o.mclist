// 2: .entrypoint: 
// 3:              push, rbp                    
rex(48)op(ff)modR/M(f5)
// 4:              push, rbx                    
rex(48)op(ff)modR/M(f3)
// 5:              push, rdi                    
rex(48)op(ff)modR/M(f7)
// 6:              mov, rbp, rsp                
rex(48)op(89)modR/M(e5)
// 7:              sub, rsp, 24                 
rex(48)op(83)modR/M(ec)i8(18)
// 8:              mov, rbx, rcx                ; (preserve) [combiner]
rex(48)op(89)modR/M(cb)
// 9:              lea, rcx, [rbp-8]            ; cout
rex(48)op(8d)modR/M(4d)d8(f8)
// 10:              sub, rsp, 32                 
rex(48)op(83)modR/M(ec)i8(20)
// 11:              call, .sht.cons.stdout_sctor ; (call label)
op(e8)co32(00-00-00-00)
// 12:              add, rsp, 32                 
rex(48)op(81)modR/M(c4)i32(20-00-00-00)
// 13:              mov, rdi, rcx                ; (preserve) [combiner]
rex(48)op(89)modR/M(cf)
// 14:              lea, rcx, [rbp-24]           ; obj0
rex(48)op(8d)modR/M(4d)d8(e8)
// 15:              sub, rsp, 32                 
rex(48)op(83)modR/M(ec)i8(20)
// 16:              call, .test.test_sctor       ; (call label)
op(e8)co32(00-00-00-00)
// 17:              add, rsp, 32                 
rex(48)op(81)modR/M(c4)i32(20-00-00-00)
// 18:              mov, [rcx+8], rdi            ; =
rex(48)op(89)modR/M(79)d8(08)
// 19:              sub, rsp, 32                 
rex(48)op(83)modR/M(ec)i8(20)
// 20:              mov, rdx, rbx                ;       (args req for rdx) [splitter]
rex(48)op(89)modR/M(da)
// 21:              call, [rcx]                  ; (vtbl call)
rex(48)op(ff)modR/M(11)
// 22:              add, rsp, 32                 
rex(48)op(81)modR/M(c4)i32(20-00-00-00)
// 23:              sub, rsp, 32                 
rex(48)op(83)modR/M(ec)i8(20)
// 24:              call, .test.test_sdtor       ; (call label)
op(e8)co32(00-00-00-00)
// 25:              add, rsp, 32                 
rex(48)op(81)modR/M(c4)i32(20-00-00-00)
// 26:              sub, rsp, 32                 
rex(48)op(83)modR/M(ec)i8(20)
// 27:              mov, rcx, rdi                ; (restore [combiner])
rex(48)op(89)modR/M(f9)
// 28:              call, .sht.cons.stdout_sdtor ; (call label)
op(e8)co32(00-00-00-00)
// 29:              add, rsp, 32                 
rex(48)op(81)modR/M(c4)i32(20-00-00-00)
// 30:              mov, rsp, rbp                
rex(48)op(89)modR/M(ec)
// 31:              pop, rdi                     
rex(48)op(8f)modR/M(c7)
// 32:              pop, rbx                     
rex(48)op(8f)modR/M(c3)
// 33:              pop, rbp                     
rex(48)op(8f)modR/M(c5)
// 34:              ret                          
op(c3)
// 37: .test.consoleTarget.cctor: 
// 38:                            push, rbp
rex(48)op(ff)modR/M(f5)
// 39:                            mov, rbp, rsp
rex(48)op(89)modR/M(e5)
// 40:                            mov, rsp, rbp
rex(48)op(89)modR/M(ec)
// 41:                            pop, rbp
rex(48)op(8f)modR/M(c5)
// 42:                            ret
op(c3)
// 45: .test.consoleTarget.cdtor: 
// 46:                            push, rbp
rex(48)op(ff)modR/M(f5)
// 47:                            mov, rbp, rsp
rex(48)op(89)modR/M(e5)
// 48:                            mov, rsp, rbp
rex(48)op(89)modR/M(ec)
// 49:                            pop, rbp
rex(48)op(8f)modR/M(c5)
// 50:                            ret
op(c3)
// 53: .test.consoleTarget_vtbl_inst:
// 56: .test.consoleTarget_sctor: 
// 57:                            push, rbp                                        
rex(48)op(ff)modR/M(f5)
// 58:                            push, rbx                                        
rex(48)op(ff)modR/M(f3)
// 59:                            mov, rbp, rsp                                    
rex(48)op(89)modR/M(e5)
// 60:                            sub, rsp, 32                                     
rex(48)op(83)modR/M(ec)i8(20)
// 61:                            call, .sht.core.object_sctor                     ; (call label)
op(e8)co32(00-00-00-00)
// 62:                            add, rsp, 32                                     
rex(48)op(81)modR/M(c4)i32(20-00-00-00)
// 63:                            lea, rbx, qwordptr .test.consoleTarget_vtbl_inst 
rex(48)op(8d)modR/M(1d)disp32toLabel(00-00-00-00)
// 64:                            mov, [rcx], rbx                                  ; =
rex(48)op(89)modR/M(19)
// 65:                            sub, rsp, 32                                     
rex(48)op(83)modR/M(ec)i8(20)
// 66:                            call, .test.consoleTarget.cctor                  ; (call label)
op(e8)co32(00-00-00-00)
// 67:                            add, rsp, 32                                     
rex(48)op(81)modR/M(c4)i32(20-00-00-00)
// 68:                            mov, rsp, rbp                                    
rex(48)op(89)modR/M(ec)
// 69:                            pop, rbx                                         
rex(48)op(8f)modR/M(c3)
// 70:                            pop, rbp                                         
rex(48)op(8f)modR/M(c5)
// 71:                            ret                                              
op(c3)
// 74: .test.consoleTarget_sdtor: 
// 75:                            push, rbp                                        
rex(48)op(ff)modR/M(f5)
// 76:                            push, rbx                                        
rex(48)op(ff)modR/M(f3)
// 77:                            mov, rbp, rsp                                    
rex(48)op(89)modR/M(e5)
// 78:                            lea, rbx, qwordptr .test.consoleTarget_vtbl_inst 
rex(48)op(8d)modR/M(1d)disp32toLabel(00-00-00-00)
// 79:                            mov, [rcx], rbx                                  ; =
rex(48)op(89)modR/M(19)
// 80:                            sub, rsp, 32                                     
rex(48)op(83)modR/M(ec)i8(20)
// 81:                            call, .test.consoleTarget.cdtor                  ; (call label)
op(e8)co32(00-00-00-00)
// 82:                            add, rsp, 32                                     
rex(48)op(81)modR/M(c4)i32(20-00-00-00)
// 83:                            sub, rsp, 32                                     
rex(48)op(83)modR/M(ec)i8(20)
// 84:                            call, .sht.core.object_sdtor                     ; (call label)
op(e8)co32(00-00-00-00)
// 85:                            add, rsp, 32                                     
rex(48)op(81)modR/M(c4)i32(20-00-00-00)
// 86:                            mov, rsp, rbp                                    
rex(48)op(89)modR/M(ec)
// 87:                            pop, rbx                                         
rex(48)op(8f)modR/M(c3)
// 88:                            pop, rbp                                         
rex(48)op(8f)modR/M(c5)
// 89:                            ret                                              
op(c3)
