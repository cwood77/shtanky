// 2: .assign.assignTester.run: 
// 3:                           ret
op(c3)
// 6: .assign.assignTester.readFromSubObject: 
// 7:                                         mov, r8, [rdx+16] ; =
rex(4c)op(8b)modR/M(42)d8(10)
// 8:                                         ret               
op(c3)
// 11: .assign.assignTester.writeIntoSubObject: 
// 12:                                          push, rbx        
rex(48)op(ff)modR/M(f3)
// 13:                                          sub, rsp, 24     
rex(48)op(83)modR/M(ec)i8(18)
// 14:                                          sub, rsp, 24     
rex(48)op(83)modR/M(ec)i8(18)
// 15:                                          mov, [rbx+16], 7 ; =
rex(48)op(c7)d8(43)i32(07-00-00-00)
// 16:                                          add, rsp, 24     
rex(48)op(83)modR/M(c4)i8(18)
// 17:                                          add, rsp, 24     
rex(48)op(83)modR/M(c4)i8(18)
// 18:                                          pop, rbx         
rex(48)op(8f)modR/M(c3)
// 19:                                          ret              
op(c3)
// 22: .assign.assignTester.readFromSubSubObject: 
// 23:                                            push, rbx          
rex(48)op(ff)modR/M(f3)
// 24:                                            push, rdi          
rex(48)op(ff)modR/M(f7)
// 25:                                            mov, rbx, [rdi+16] ; fieldaccess: owner of x
rex(48)op(8b)modR/M(5f)d8(10)
// 26:                                            mov, r8, [rbx+16]  ; =
rex(4c)op(8b)modR/M(43)d8(10)
// 27:                                            pop, rdi           
rex(48)op(8f)modR/M(c7)
// 28:                                            pop, rbx           
rex(48)op(8f)modR/M(c3)
// 29:                                            ret                
op(c3)
// 32: .assign.assignTester.writeIntoSubSubObject: 
// 33:                                             push, rbx          
rex(48)op(ff)modR/M(f3)
// 34:                                             push, rdi          
rex(48)op(ff)modR/M(f7)
// 35:                                             sub, rsp, 24       
rex(48)op(83)modR/M(ec)i8(18)
// 36:                                             sub, rsp, 24       
rex(48)op(83)modR/M(ec)i8(18)
// 37:                                             mov, rbx, [rdi+16] ; fieldaccess: owner of x
rex(48)op(8b)modR/M(5f)d8(10)
// 38:                                             mov, [rbx+16], 7   ; =
rex(48)op(c7)d8(43)i32(07-00-00-00)
// 39:                                             add, rsp, 24       
rex(48)op(83)modR/M(c4)i8(18)
// 40:                                             add, rsp, 24       
rex(48)op(83)modR/M(c4)i8(18)
// 41:                                             pop, rdi           
rex(48)op(8f)modR/M(c7)
// 42:                                             pop, rbx           
rex(48)op(8f)modR/M(c3)
// 43:                                             ret                
op(c3)
// 46: .assign.assignTester.cctor: 
// 47:                             ret
op(c3)
// 50: .assign.assignTester.cdtor: 
// 51:                             ret
op(c3)
// 54: .assign.A.cctor: 
// 55:                  ret
op(c3)
// 58: .assign.A.cdtor: 
// 59:                  ret
op(c3)
// 62: .assign.B.cctor: 
// 63:                  ret
op(c3)
// 66: .assign.B.cdtor: 
// 67:                  ret
op(c3)
// 70: .assign.A_vtbl_inst:
// 71: .data, 
// 74: .assign.B_vtbl_inst:
// 75: .data, 
// 78: .assign.assignTester_vtbl_inst:
// 79: .data, .assign.assignTester.run 
_lbldata(00-00-00-00,00-00-00-00)
// 82: .assign.A_sctor: 
// 83:                  sub, rsp, 32                    
rex(48)op(83)modR/M(ec)i8(20)
// 84:                  call, .sht.core.object_sctor    ; (call label)
op(e8)co32(00-00-00-00)
// 85:                  add, rsp, 32                    
rex(48)op(83)modR/M(c4)i8(20)
// 86:                  mov, [rcx], .assign.A_vtbl_inst ; =
rex(48)op(c7)modR/M(01)i32(00-00-00-00)
// 87:                  sub, rsp, 32                    
rex(48)op(83)modR/M(ec)i8(20)
// 88:                  call, .assign.A.cctor           ; (call label)
op(e8)co32(00-00-00-00)
// 89:                  add, rsp, 32                    
rex(48)op(83)modR/M(c4)i8(20)
// 90:                  ret                             
op(c3)
// 93: .assign.B_sctor: 
// 94:                  sub, rsp, 32                    
rex(48)op(83)modR/M(ec)i8(20)
// 95:                  call, .sht.core.object_sctor    ; (call label)
op(e8)co32(00-00-00-00)
// 96:                  add, rsp, 32                    
rex(48)op(83)modR/M(c4)i8(20)
// 97:                  mov, [rcx], .assign.B_vtbl_inst ; =
rex(48)op(c7)modR/M(01)i32(00-00-00-00)
// 98:                  sub, rsp, 32                    
rex(48)op(83)modR/M(ec)i8(20)
// 99:                  call, .assign.B.cctor           ; (call label)
op(e8)co32(00-00-00-00)
// 100:                  add, rsp, 32                    
rex(48)op(83)modR/M(c4)i8(20)
// 101:                  ret                             
op(c3)
// 104: .assign.assignTester_sctor: 
// 105:                             sub, rsp, 32                               
rex(48)op(83)modR/M(ec)i8(20)
// 106:                             call, .sht.cons.program_sctor              ; (call label)
op(e8)co32(00-00-00-00)
// 107:                             add, rsp, 32                               
rex(48)op(83)modR/M(c4)i8(20)
// 108:                             mov, [rcx], .assign.assignTester_vtbl_inst ; =
rex(48)op(c7)modR/M(01)i32(00-00-00-00)
// 109:                             sub, rsp, 32                               
rex(48)op(83)modR/M(ec)i8(20)
// 110:                             call, .assign.assignTester.cctor           ; (call label)
op(e8)co32(00-00-00-00)
// 111:                             add, rsp, 32                               
rex(48)op(83)modR/M(c4)i8(20)
// 112:                             ret                                        
op(c3)
