// 2: .assign.assignTester.run: 
// 3:                           ret
op(c3)
// 6: .assign.assignTester.readFromSubObject: 
// 7:                                         mov, r8, [rdx+16] ; =
rex(4c)op(8b)modR/M(42)d8(10)
// 8:                                         ret               
op(c3)
// 11: .assign.assignTester.writeIntoSubObject: 
// 12:                                          sub, rsp, 24          
rex(48)op(83)modR/M(ec)i8(18)
// 13:                                          sub, rsp, 24          
rex(48)op(83)modR/M(ec)i8(18)
// 14:                                          sub, rsp, 32          
rex(48)op(83)modR/M(ec)i8(20)
// 15:                                          call, .assign.A_sctor ; (call label)
op(ff)modR/M(15)co32(00-00-00-00)
// 16:                                          add, rsp, 32          
rex(48)op(83)modR/M(c4)i8(20)
// 17:                                          mov, [rcx+16], 7      ; =
rex(48)op(c7)modR/M(41)d8(10)i32(07-00-00-00)
// 18:                                          sub, rsp, 32          
rex(48)op(83)modR/M(ec)i8(20)
// 19:                                          call, .assign.A_sdtor ; (call label)
op(ff)modR/M(15)co32(00-00-00-00)
// 20:                                          add, rsp, 32          
rex(48)op(83)modR/M(c4)i8(20)
// 21:                                          add, rsp, 24          
rex(48)op(83)modR/M(c4)i8(18)
// 22:                                          add, rsp, 24          
rex(48)op(83)modR/M(c4)i8(18)
// 23:                                          ret                   
op(c3)
// 26: .assign.assignTester.readFromSubSubObject: 
// 27:                                            push, rbx          
rex(48)op(ff)modR/M(f3)
// 28:                                            push, rdi          
rex(48)op(ff)modR/M(f7)
// 29:                                            mov, rbx, [rdi+16] ; fieldaccess: owner of x
rex(48)op(8b)modR/M(5f)d8(10)
// 30:                                            mov, r8, [rbx+16]  ; =
rex(4c)op(8b)modR/M(43)d8(10)
// 31:                                            pop, rdi           
rex(48)op(8f)modR/M(c7)
// 32:                                            pop, rbx           
rex(48)op(8f)modR/M(c3)
// 33:                                            ret                
op(c3)
// 36: .assign.assignTester.writeIntoSubSubObject: 
// 37:                                             push, rbx             
rex(48)op(ff)modR/M(f3)
// 38:                                             sub, rsp, 24          
rex(48)op(83)modR/M(ec)i8(18)
// 39:                                             sub, rsp, 24          
rex(48)op(83)modR/M(ec)i8(18)
// 40:                                             sub, rsp, 32          
rex(48)op(83)modR/M(ec)i8(20)
// 41:                                             call, .assign.A_sctor ; (call label)
op(ff)modR/M(15)co32(00-00-00-00)
// 42:                                             add, rsp, 32          
rex(48)op(83)modR/M(c4)i8(20)
// 43:                                             mov, rbx, [rcx+16]    ; fieldaccess: owner of x
rex(48)op(8b)modR/M(59)d8(10)
// 44:                                             mov, [rbx+16], 7      ; =
rex(48)op(c7)modR/M(43)d8(10)i32(07-00-00-00)
// 45:                                             sub, rsp, 32          
rex(48)op(83)modR/M(ec)i8(20)
// 46:                                             call, .assign.A_sdtor ; (call label)
op(ff)modR/M(15)co32(00-00-00-00)
// 47:                                             add, rsp, 32          
rex(48)op(83)modR/M(c4)i8(20)
// 48:                                             add, rsp, 24          
rex(48)op(83)modR/M(c4)i8(18)
// 49:                                             add, rsp, 24          
rex(48)op(83)modR/M(c4)i8(18)
// 50:                                             pop, rbx              
rex(48)op(8f)modR/M(c3)
// 51:                                             ret                   
op(c3)
// 54: .assign.assignTester.bopAssociativity: 
// 55:                                        push, rbx   
rex(48)op(ff)modR/M(f3)
// 56:                                        sub, rsp, 8 
rex(48)op(83)modR/M(ec)i8(08)
// 57:                                        sub, rsp, 8 
rex(48)op(83)modR/M(ec)i8(08)
// 58:                                        mov, rbx, 1 ; shape:hoist const from mov lhs
rex(48)op(bb)i64(01-00-00-00,00-00-00-00)
// 59:                                        mov, rbx, 2 ; BOP , but not really - HACK!!
rex(48)op(bb)i64(02-00-00-00,00-00-00-00)
// 60:                                        mov, rbx, 1 ; shape:hoist const from mov lhs
rex(48)op(bb)i64(01-00-00-00,00-00-00-00)
// 61:                                        mov, rbx, 3 ; BOP , but not really - HACK!!
rex(48)op(bb)i64(03-00-00-00,00-00-00-00)
// 62:                                        mov, rbx, 1 ; =
rex(48)op(bb)i64(01-00-00-00,00-00-00-00)
// 63:                                        add, rsp, 8 
rex(48)op(83)modR/M(c4)i8(08)
// 64:                                        add, rsp, 8 
rex(48)op(83)modR/M(c4)i8(08)
// 65:                                        pop, rbx    
rex(48)op(8f)modR/M(c3)
// 66:                                        ret         
op(c3)
// 69: .assign.assignTester.cctor: 
// 70:                             ret
op(c3)
// 73: .assign.assignTester.cdtor: 
// 74:                             ret
op(c3)
// 77: .assign.A.cctor: 
// 78:                  ret
op(c3)
// 81: .assign.A.cdtor: 
// 82:                  ret
op(c3)
// 85: .assign.B.cctor: 
// 86:                  ret
op(c3)
// 89: .assign.B.cdtor: 
// 90:                  ret
op(c3)
// 93: .assign.A_vtbl_inst:
// 94: .data, 
// 97: .assign.B_vtbl_inst:
// 98: .data, 
// 101: .assign.assignTester_vtbl_inst:
// 102: .data, .assign.assignTester.run 
_lbldata(00-00-00-00,00-00-00-00)
// 105: .assign.A_sctor: 
// 106:                  sub, rsp, 32                  
rex(48)op(83)modR/M(ec)i8(20)
// 107:                  call, .sht.core.object_sctor  ; (call label)
op(ff)modR/M(15)co32(00-00-00-00)
// 108:                  add, rsp, 32                  
rex(48)op(83)modR/M(c4)i8(20)
// 109:                  mov, r10, .assign.A_vtbl_inst ; codeshape decomp
rex(4c)op(8b)modR/M(15)co32(00-00-00-00)
// 110:                  mov, [rcx], r10               ; =
rex(4c)op(89)modR/M(11)
// 111:                  sub, rsp, 32                  
rex(48)op(83)modR/M(ec)i8(20)
// 112:                  call, .assign.A.cctor         ; (call label)
op(ff)modR/M(15)co32(00-00-00-00)
// 113:                  add, rsp, 32                  
rex(48)op(83)modR/M(c4)i8(20)
// 114:                  ret                           
op(c3)
// 117: .assign.A_sdtor: 
// 118:                  mov, r10, .assign.A_vtbl_inst ; codeshape decomp
rex(4c)op(8b)modR/M(15)co32(00-00-00-00)
// 119:                  mov, [rcx], r10               ; =
rex(4c)op(89)modR/M(11)
// 120:                  sub, rsp, 32                  
rex(48)op(83)modR/M(ec)i8(20)
// 121:                  call, .assign.A.cdtor         ; (call label)
op(ff)modR/M(15)co32(00-00-00-00)
// 122:                  add, rsp, 32                  
rex(48)op(83)modR/M(c4)i8(20)
// 123:                  sub, rsp, 32                  
rex(48)op(83)modR/M(ec)i8(20)
// 124:                  call, .sht.core.object_sdtor  ; (call label)
op(ff)modR/M(15)co32(00-00-00-00)
// 125:                  add, rsp, 32                  
rex(48)op(83)modR/M(c4)i8(20)
// 126:                  ret                           
op(c3)
// 129: .assign.B_sctor: 
// 130:                  sub, rsp, 32                  
rex(48)op(83)modR/M(ec)i8(20)
// 131:                  call, .sht.core.object_sctor  ; (call label)
op(ff)modR/M(15)co32(00-00-00-00)
// 132:                  add, rsp, 32                  
rex(48)op(83)modR/M(c4)i8(20)
// 133:                  mov, r10, .assign.B_vtbl_inst ; codeshape decomp
rex(4c)op(8b)modR/M(15)co32(00-00-00-00)
// 134:                  mov, [rcx], r10               ; =
rex(4c)op(89)modR/M(11)
// 135:                  sub, rsp, 32                  
rex(48)op(83)modR/M(ec)i8(20)
// 136:                  call, .assign.B.cctor         ; (call label)
op(ff)modR/M(15)co32(00-00-00-00)
// 137:                  add, rsp, 32                  
rex(48)op(83)modR/M(c4)i8(20)
// 138:                  ret                           
op(c3)
// 141: .assign.B_sdtor: 
// 142:                  mov, r10, .assign.B_vtbl_inst ; codeshape decomp
rex(4c)op(8b)modR/M(15)co32(00-00-00-00)
// 143:                  mov, [rcx], r10               ; =
rex(4c)op(89)modR/M(11)
// 144:                  sub, rsp, 32                  
rex(48)op(83)modR/M(ec)i8(20)
// 145:                  call, .assign.B.cdtor         ; (call label)
op(ff)modR/M(15)co32(00-00-00-00)
// 146:                  add, rsp, 32                  
rex(48)op(83)modR/M(c4)i8(20)
// 147:                  sub, rsp, 32                  
rex(48)op(83)modR/M(ec)i8(20)
// 148:                  call, .sht.core.object_sdtor  ; (call label)
op(ff)modR/M(15)co32(00-00-00-00)
// 149:                  add, rsp, 32                  
rex(48)op(83)modR/M(c4)i8(20)
// 150:                  ret                           
op(c3)
// 153: .assign.assignTester_sctor: 
// 154:                             sub, rsp, 32                             
rex(48)op(83)modR/M(ec)i8(20)
// 155:                             call, .sht.cons.program_sctor            ; (call label)
op(ff)modR/M(15)co32(00-00-00-00)
// 156:                             add, rsp, 32                             
rex(48)op(83)modR/M(c4)i8(20)
// 157:                             mov, r10, .assign.assignTester_vtbl_inst ; codeshape decomp
rex(4c)op(8b)modR/M(15)co32(00-00-00-00)
// 158:                             mov, [rcx], r10                          ; =
rex(4c)op(89)modR/M(11)
// 159:                             sub, rsp, 32                             
rex(48)op(83)modR/M(ec)i8(20)
// 160:                             call, .assign.assignTester.cctor         ; (call label)
op(ff)modR/M(15)co32(00-00-00-00)
// 161:                             add, rsp, 32                             
rex(48)op(83)modR/M(c4)i8(20)
// 162:                             ret                                      
op(c3)
// 165: .assign.assignTester_sdtor: 
// 166:                             mov, r10, .assign.assignTester_vtbl_inst ; codeshape decomp
rex(4c)op(8b)modR/M(15)co32(00-00-00-00)
// 167:                             mov, [rcx], r10                          ; =
rex(4c)op(89)modR/M(11)
// 168:                             sub, rsp, 32                             
rex(48)op(83)modR/M(ec)i8(20)
// 169:                             call, .assign.assignTester.cdtor         ; (call label)
op(ff)modR/M(15)co32(00-00-00-00)
// 170:                             add, rsp, 32                             
rex(48)op(83)modR/M(c4)i8(20)
// 171:                             sub, rsp, 32                             
rex(48)op(83)modR/M(ec)i8(20)
// 172:                             call, .sht.cons.program_sdtor            ; (call label)
op(ff)modR/M(15)co32(00-00-00-00)
// 173:                             add, rsp, 32                             
rex(48)op(83)modR/M(c4)i8(20)
// 174:                             ret                                      
op(c3)
