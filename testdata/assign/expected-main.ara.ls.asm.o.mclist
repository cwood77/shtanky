// 2: .assign.assignTester.run: 
// 3:                           push, rbp
rex(48)op(ff)modR/M(f5)
// 4:                           mov, rbp, rsp
rex(48)op(89)modR/M(e5)
// 5:                           mov, rsp, rbp
rex(48)op(89)modR/M(ec)
// 6:                           pop, rbp
rex(48)op(8f)modR/M(c5)
// 7:                           ret
op(c3)
// 10: .assign.assignTester.readFromSubObject: 
// 11:                                         push, rbp         
rex(48)op(ff)modR/M(f5)
// 12:                                         mov, rbp, rsp     
rex(48)op(89)modR/M(e5)
// 13:                                         mov, r8, [rdx+16] ; =
rex(4c)op(8b)modR/M(42)d8(10)
// 14:                                         mov, rsp, rbp     
rex(48)op(89)modR/M(ec)
// 15:                                         pop, rbp          
rex(48)op(8f)modR/M(c5)
// 16:                                         ret               
op(c3)
// 19: .assign.assignTester.writeIntoSubObject: 
// 20:                                          push, rbp             
rex(48)op(ff)modR/M(f5)
// 21:                                          mov, rbp, rsp         
rex(48)op(89)modR/M(e5)
// 22:                                          sub, rsp, 24          
rex(48)op(83)modR/M(ec)i8(18)
// 23:                                          sub, rsp, 24          
rex(48)op(83)modR/M(ec)i8(18)
// 24:                                          sub, rsp, 32          
rex(48)op(83)modR/M(ec)i8(20)
// 25:                                          call, .assign.A_sctor ; (call label)
op(e8)co32(00-00-00-00)
// 26:                                          add, rsp, 32          
rex(48)op(81)modR/M(c4)i32(20-00-00-00)
// 27:                                          mov, [rcx+16], 7      ; =
rex(48)op(c7)modR/M(41)d8(10)i32(07-00-00-00)
// 28:                                          sub, rsp, 32          
rex(48)op(83)modR/M(ec)i8(20)
// 29:                                          call, .assign.A_sdtor ; (call label)
op(e8)co32(00-00-00-00)
// 30:                                          add, rsp, 32          
rex(48)op(81)modR/M(c4)i32(20-00-00-00)
// 31:                                          add, rsp, 24          
rex(48)op(81)modR/M(c4)i32(18-00-00-00)
// 32:                                          mov, rsp, rbp         
rex(48)op(89)modR/M(ec)
// 33:                                          pop, rbp              
rex(48)op(8f)modR/M(c5)
// 34:                                          ret                   
op(c3)
// 37: .assign.assignTester.readFromSubSubObject: 
// 38:                                            push, rbp          
rex(48)op(ff)modR/M(f5)
// 39:                                            push, rbx          
rex(48)op(ff)modR/M(f3)
// 40:                                            push, rdi          
rex(48)op(ff)modR/M(f7)
// 41:                                            mov, rbp, rsp      
rex(48)op(89)modR/M(e5)
// 42:                                            mov, rbx, [rdi+16] ; fieldaccess: owner of _x
rex(48)op(8b)modR/M(5f)d8(10)
// 43:                                            mov, r8, [rbx+16]  ; =
rex(4c)op(8b)modR/M(43)d8(10)
// 44:                                            mov, rsp, rbp      
rex(48)op(89)modR/M(ec)
// 45:                                            pop, rdi           
rex(48)op(8f)modR/M(c7)
// 46:                                            pop, rbx           
rex(48)op(8f)modR/M(c3)
// 47:                                            pop, rbp           
rex(48)op(8f)modR/M(c5)
// 48:                                            ret                
op(c3)
// 51: .assign.assignTester.writeIntoSubSubObject: 
// 52:                                             push, rbp             
rex(48)op(ff)modR/M(f5)
// 53:                                             push, rbx             
rex(48)op(ff)modR/M(f3)
// 54:                                             mov, rbp, rsp         
rex(48)op(89)modR/M(e5)
// 55:                                             sub, rsp, 24          
rex(48)op(83)modR/M(ec)i8(18)
// 56:                                             sub, rsp, 24          
rex(48)op(83)modR/M(ec)i8(18)
// 57:                                             sub, rsp, 32          
rex(48)op(83)modR/M(ec)i8(20)
// 58:                                             call, .assign.A_sctor ; (call label)
op(e8)co32(00-00-00-00)
// 59:                                             add, rsp, 32          
rex(48)op(81)modR/M(c4)i32(20-00-00-00)
// 60:                                             mov, rbx, [rcx+16]    ; fieldaccess: owner of _x
rex(48)op(8b)modR/M(59)d8(10)
// 61:                                             mov, [rbx+16], 7      ; =
rex(48)op(c7)modR/M(43)d8(10)i32(07-00-00-00)
// 62:                                             sub, rsp, 32          
rex(48)op(83)modR/M(ec)i8(20)
// 63:                                             call, .assign.A_sdtor ; (call label)
op(e8)co32(00-00-00-00)
// 64:                                             add, rsp, 32          
rex(48)op(81)modR/M(c4)i32(20-00-00-00)
// 65:                                             add, rsp, 24          
rex(48)op(81)modR/M(c4)i32(18-00-00-00)
// 66:                                             mov, rsp, rbp         
rex(48)op(89)modR/M(ec)
// 67:                                             pop, rbx              
rex(48)op(8f)modR/M(c3)
// 68:                                             pop, rbp              
rex(48)op(8f)modR/M(c5)
// 69:                                             ret                   
op(c3)
// 72: .assign.assignTester.bopAssociativity: 
// 73:                                        push, rbp     
rex(48)op(ff)modR/M(f5)
// 74:                                        push, rbx     
rex(48)op(ff)modR/M(f3)
// 75:                                        push, rdi     
rex(48)op(ff)modR/M(f7)
// 76:                                        mov, rbp, rsp 
rex(48)op(89)modR/M(e5)
// 77:                                        sub, rsp, 8   
rex(48)op(83)modR/M(ec)i8(08)
// 78:                                        sub, rsp, 8   
rex(48)op(83)modR/M(ec)i8(08)
// 79:                                        mov, rdi, 1   
rex(48)op(bf)i64(01-00-00-00,00-00-00-00)
// 80:                                        add, rdi, 2   
rex(48)op(81)modR/M(c7)i32(02-00-00-00)
// 81:                                        mov, rbx, rdi 
rex(48)op(89)modR/M(fb)
// 82:                                        add, rbx, 3   
rex(48)op(81)modR/M(c3)i32(03-00-00-00)
// 83:                                        mov, rbx, rbx ; =
rex(48)op(89)modR/M(db)
// 84:                                        add, rsp, 8   
rex(48)op(81)modR/M(c4)i32(08-00-00-00)
// 85:                                        mov, rsp, rbp 
rex(48)op(89)modR/M(ec)
// 86:                                        pop, rdi      
rex(48)op(8f)modR/M(c7)
// 87:                                        pop, rbx      
rex(48)op(8f)modR/M(c3)
// 88:                                        pop, rbp      
rex(48)op(8f)modR/M(c5)
// 89:                                        ret           
op(c3)
// 92: .assign.assignTester.cctor: 
// 93:                             push, rbp
rex(48)op(ff)modR/M(f5)
// 94:                             mov, rbp, rsp
rex(48)op(89)modR/M(e5)
// 95:                             mov, rsp, rbp
rex(48)op(89)modR/M(ec)
// 96:                             pop, rbp
rex(48)op(8f)modR/M(c5)
// 97:                             ret
op(c3)
// 100: .assign.assignTester.cdtor: 
// 101:                             push, rbp
rex(48)op(ff)modR/M(f5)
// 102:                             mov, rbp, rsp
rex(48)op(89)modR/M(e5)
// 103:                             mov, rsp, rbp
rex(48)op(89)modR/M(ec)
// 104:                             pop, rbp
rex(48)op(8f)modR/M(c5)
// 105:                             ret
op(c3)
// 108: .assign.A.cctor: 
// 109:                  push, rbp
rex(48)op(ff)modR/M(f5)
// 110:                  mov, rbp, rsp
rex(48)op(89)modR/M(e5)
// 111:                  mov, rsp, rbp
rex(48)op(89)modR/M(ec)
// 112:                  pop, rbp
rex(48)op(8f)modR/M(c5)
// 113:                  ret
op(c3)
// 116: .assign.A.cdtor: 
// 117:                  push, rbp
rex(48)op(ff)modR/M(f5)
// 118:                  mov, rbp, rsp
rex(48)op(89)modR/M(e5)
// 119:                  mov, rsp, rbp
rex(48)op(89)modR/M(ec)
// 120:                  pop, rbp
rex(48)op(8f)modR/M(c5)
// 121:                  ret
op(c3)
// 124: .assign.B.cctor: 
// 125:                  push, rbp
rex(48)op(ff)modR/M(f5)
// 126:                  mov, rbp, rsp
rex(48)op(89)modR/M(e5)
// 127:                  mov, rsp, rbp
rex(48)op(89)modR/M(ec)
// 128:                  pop, rbp
rex(48)op(8f)modR/M(c5)
// 129:                  ret
op(c3)
// 132: .assign.B.cdtor: 
// 133:                  push, rbp
rex(48)op(ff)modR/M(f5)
// 134:                  mov, rbp, rsp
rex(48)op(89)modR/M(e5)
// 135:                  mov, rsp, rbp
rex(48)op(89)modR/M(ec)
// 136:                  pop, rbp
rex(48)op(8f)modR/M(c5)
// 137:                  ret
op(c3)
// 140: .assign.A_vtbl_inst:
// 141: .data, 
// 144: .assign.B_vtbl_inst:
// 145: .data, 
// 148: .assign.assignTester_vtbl_inst:
// 149: .data, .assign.assignTester.run 
_lbldata(00-00-00-00,00-00-00-00)
// 152: .assign.A_sctor: 
// 153:                  push, rbp                              
rex(48)op(ff)modR/M(f5)
// 154:                  mov, rbp, rsp                          
rex(48)op(89)modR/M(e5)
// 155:                  sub, rsp, 32                           
rex(48)op(83)modR/M(ec)i8(20)
// 156:                  call, .sht.core.object_sctor           ; (call label)
op(e8)co32(00-00-00-00)
// 157:                  add, rsp, 32                           
rex(48)op(81)modR/M(c4)i32(20-00-00-00)
// 158:                  mov, r10, qwordptr .assign.A_vtbl_inst ; codeshape decomp
rex(4c)op(8b)modR/M(15)disp32toLabel(00-00-00-00)
// 159:                  mov, [rcx], r10                        ; =
rex(4c)op(89)modR/M(11)
// 160:                  sub, rsp, 32                           
rex(48)op(83)modR/M(ec)i8(20)
// 161:                  call, .assign.A.cctor                  ; (call label)
op(e8)co32(00-00-00-00)
// 162:                  add, rsp, 32                           
rex(48)op(81)modR/M(c4)i32(20-00-00-00)
// 163:                  mov, rsp, rbp                          
rex(48)op(89)modR/M(ec)
// 164:                  pop, rbp                               
rex(48)op(8f)modR/M(c5)
// 165:                  ret                                    
op(c3)
// 168: .assign.A_sdtor: 
// 169:                  push, rbp                              
rex(48)op(ff)modR/M(f5)
// 170:                  mov, rbp, rsp                          
rex(48)op(89)modR/M(e5)
// 171:                  mov, r10, qwordptr .assign.A_vtbl_inst ; codeshape decomp
rex(4c)op(8b)modR/M(15)disp32toLabel(00-00-00-00)
// 172:                  mov, [rcx], r10                        ; =
rex(4c)op(89)modR/M(11)
// 173:                  sub, rsp, 32                           
rex(48)op(83)modR/M(ec)i8(20)
// 174:                  call, .assign.A.cdtor                  ; (call label)
op(e8)co32(00-00-00-00)
// 175:                  add, rsp, 32                           
rex(48)op(81)modR/M(c4)i32(20-00-00-00)
// 176:                  sub, rsp, 32                           
rex(48)op(83)modR/M(ec)i8(20)
// 177:                  call, .sht.core.object_sdtor           ; (call label)
op(e8)co32(00-00-00-00)
// 178:                  add, rsp, 32                           
rex(48)op(81)modR/M(c4)i32(20-00-00-00)
// 179:                  mov, rsp, rbp                          
rex(48)op(89)modR/M(ec)
// 180:                  pop, rbp                               
rex(48)op(8f)modR/M(c5)
// 181:                  ret                                    
op(c3)
// 184: .assign.B_sctor: 
// 185:                  push, rbp                              
rex(48)op(ff)modR/M(f5)
// 186:                  mov, rbp, rsp                          
rex(48)op(89)modR/M(e5)
// 187:                  sub, rsp, 32                           
rex(48)op(83)modR/M(ec)i8(20)
// 188:                  call, .sht.core.object_sctor           ; (call label)
op(e8)co32(00-00-00-00)
// 189:                  add, rsp, 32                           
rex(48)op(81)modR/M(c4)i32(20-00-00-00)
// 190:                  mov, r10, qwordptr .assign.B_vtbl_inst ; codeshape decomp
rex(4c)op(8b)modR/M(15)disp32toLabel(00-00-00-00)
// 191:                  mov, [rcx], r10                        ; =
rex(4c)op(89)modR/M(11)
// 192:                  sub, rsp, 32                           
rex(48)op(83)modR/M(ec)i8(20)
// 193:                  call, .assign.B.cctor                  ; (call label)
op(e8)co32(00-00-00-00)
// 194:                  add, rsp, 32                           
rex(48)op(81)modR/M(c4)i32(20-00-00-00)
// 195:                  mov, rsp, rbp                          
rex(48)op(89)modR/M(ec)
// 196:                  pop, rbp                               
rex(48)op(8f)modR/M(c5)
// 197:                  ret                                    
op(c3)
// 200: .assign.B_sdtor: 
// 201:                  push, rbp                              
rex(48)op(ff)modR/M(f5)
// 202:                  mov, rbp, rsp                          
rex(48)op(89)modR/M(e5)
// 203:                  mov, r10, qwordptr .assign.B_vtbl_inst ; codeshape decomp
rex(4c)op(8b)modR/M(15)disp32toLabel(00-00-00-00)
// 204:                  mov, [rcx], r10                        ; =
rex(4c)op(89)modR/M(11)
// 205:                  sub, rsp, 32                           
rex(48)op(83)modR/M(ec)i8(20)
// 206:                  call, .assign.B.cdtor                  ; (call label)
op(e8)co32(00-00-00-00)
// 207:                  add, rsp, 32                           
rex(48)op(81)modR/M(c4)i32(20-00-00-00)
// 208:                  sub, rsp, 32                           
rex(48)op(83)modR/M(ec)i8(20)
// 209:                  call, .sht.core.object_sdtor           ; (call label)
op(e8)co32(00-00-00-00)
// 210:                  add, rsp, 32                           
rex(48)op(81)modR/M(c4)i32(20-00-00-00)
// 211:                  mov, rsp, rbp                          
rex(48)op(89)modR/M(ec)
// 212:                  pop, rbp                               
rex(48)op(8f)modR/M(c5)
// 213:                  ret                                    
op(c3)
// 216: .assign.assignTester_sctor: 
// 217:                             push, rbp                                         
rex(48)op(ff)modR/M(f5)
// 218:                             mov, rbp, rsp                                     
rex(48)op(89)modR/M(e5)
// 219:                             sub, rsp, 32                                      
rex(48)op(83)modR/M(ec)i8(20)
// 220:                             call, .sht.cons.program_sctor                     ; (call label)
op(e8)co32(00-00-00-00)
// 221:                             add, rsp, 32                                      
rex(48)op(81)modR/M(c4)i32(20-00-00-00)
// 222:                             mov, r10, qwordptr .assign.assignTester_vtbl_inst ; codeshape decomp
rex(4c)op(8b)modR/M(15)disp32toLabel(00-00-00-00)
// 223:                             mov, [rcx], r10                                   ; =
rex(4c)op(89)modR/M(11)
// 224:                             sub, rsp, 32                                      
rex(48)op(83)modR/M(ec)i8(20)
// 225:                             call, .assign.assignTester.cctor                  ; (call label)
op(e8)co32(00-00-00-00)
// 226:                             add, rsp, 32                                      
rex(48)op(81)modR/M(c4)i32(20-00-00-00)
// 227:                             mov, rsp, rbp                                     
rex(48)op(89)modR/M(ec)
// 228:                             pop, rbp                                          
rex(48)op(8f)modR/M(c5)
// 229:                             ret                                               
op(c3)
// 232: .assign.assignTester_sdtor: 
// 233:                             push, rbp                                         
rex(48)op(ff)modR/M(f5)
// 234:                             mov, rbp, rsp                                     
rex(48)op(89)modR/M(e5)
// 235:                             mov, r10, qwordptr .assign.assignTester_vtbl_inst ; codeshape decomp
rex(4c)op(8b)modR/M(15)disp32toLabel(00-00-00-00)
// 236:                             mov, [rcx], r10                                   ; =
rex(4c)op(89)modR/M(11)
// 237:                             sub, rsp, 32                                      
rex(48)op(83)modR/M(ec)i8(20)
// 238:                             call, .assign.assignTester.cdtor                  ; (call label)
op(e8)co32(00-00-00-00)
// 239:                             add, rsp, 32                                      
rex(48)op(81)modR/M(c4)i32(20-00-00-00)
// 240:                             sub, rsp, 32                                      
rex(48)op(83)modR/M(ec)i8(20)
// 241:                             call, .sht.cons.program_sdtor                     ; (call label)
op(e8)co32(00-00-00-00)
// 242:                             add, rsp, 32                                      
rex(48)op(81)modR/M(c4)i32(20-00-00-00)
// 243:                             mov, rsp, rbp                                     
rex(48)op(89)modR/M(ec)
// 244:                             pop, rbp                                          
rex(48)op(8f)modR/M(c5)
// 245:                             ret                                               
op(c3)
