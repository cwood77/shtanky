// 2: .entrypoint: 
// 3:              push, rbp                        
rex(48)op(ff)modR/M(f5)
// 4:              push, rbx                        
rex(48)op(ff)modR/M(f3)
// 5:              push, rdi                        
rex(48)op(ff)modR/M(f7)
// 6:              mov, rbp, rsp                    
rex(48)op(89)modR/M(e5)
// 7:              sub, rsp, 24                     
rex(48)op(83)modR/M(ec)i8(18)
// 8:              mov, rbx, rcx                    ; (preserve) [combiner]
rex(48)op(89)modR/M(cb)
// 9:              lea, rcx, [rbp-8]                ; cout
rex(48)op(8d)modR/M(4d)d8(f8)
// 10:              sub, rsp, 32                     
rex(48)op(83)modR/M(ec)i8(20)
// 11:              call, .sht.cons.stdout_sctor     ; (call label)
op(e8)co32(00-00-00-00)
// 12:              add, rsp, 32                     
rex(48)op(81)modR/M(c4)i32(20-00-00-00)
// 13:              mov, rdi, rcx                    ; (preserve) [combiner]
rex(48)op(89)modR/M(cf)
// 14:              lea, rcx, [rbp-24]               ; obj0
rex(48)op(8d)modR/M(4d)d8(e8)
// 15:              sub, rsp, 32                     
rex(48)op(83)modR/M(ec)i8(20)
// 16:              call, .assign.assignTester_sctor ; (call label)
op(e8)co32(00-00-00-00)
// 17:              add, rsp, 32                     
rex(48)op(81)modR/M(c4)i32(20-00-00-00)
// 18:              mov, [rcx+8], rdi                ; =
rex(48)op(89)modR/M(79)d8(08)
// 19:              sub, rsp, 32                     
rex(48)op(83)modR/M(ec)i8(20)
// 20:              mov, rbx, [rcx]                  ; fieldaccess: owner of run
rex(48)op(8b)modR/M(19)
// 21:              mov, rdx, rbx                    ;       (args req for rdx) [splitter]
rex(48)op(89)modR/M(da)
// 22:              call, [rbx]                      ; (call ptr)
rex(48)op(ff)modR/M(13)
// 23:              add, rsp, 32                     
rex(48)op(81)modR/M(c4)i32(20-00-00-00)
// 24:              sub, rsp, 32                     
rex(48)op(83)modR/M(ec)i8(20)
// 25:              call, .assign.assignTester_sdtor ; (call label)
op(e8)co32(00-00-00-00)
// 26:              add, rsp, 32                     
rex(48)op(81)modR/M(c4)i32(20-00-00-00)
// 27:              sub, rsp, 32                     
rex(48)op(83)modR/M(ec)i8(20)
// 28:              mov, rcx, rdi                    ; (restore [combiner])
rex(48)op(89)modR/M(f9)
// 29:              call, .sht.cons.stdout_sdtor     ; (call label)
op(e8)co32(00-00-00-00)
// 30:              add, rsp, 32                     
rex(48)op(81)modR/M(c4)i32(20-00-00-00)
// 31:              mov, rsp, rbp                    
rex(48)op(89)modR/M(ec)
// 32:              pop, rdi                         
rex(48)op(8f)modR/M(c7)
// 33:              pop, rbx                         
rex(48)op(8f)modR/M(c3)
// 34:              pop, rbp                         
rex(48)op(8f)modR/M(c5)
// 35:              ret                              
op(c3)
// 38: .assign.consoleTarget.cctor: 
// 39:                              push, rbp
rex(48)op(ff)modR/M(f5)
// 40:                              mov, rbp, rsp
rex(48)op(89)modR/M(e5)
// 41:                              mov, rsp, rbp
rex(48)op(89)modR/M(ec)
// 42:                              pop, rbp
rex(48)op(8f)modR/M(c5)
// 43:                              ret
op(c3)
// 46: .assign.consoleTarget.cdtor: 
// 47:                              push, rbp
rex(48)op(ff)modR/M(f5)
// 48:                              mov, rbp, rsp
rex(48)op(89)modR/M(e5)
// 49:                              mov, rsp, rbp
rex(48)op(89)modR/M(ec)
// 50:                              pop, rbp
rex(48)op(8f)modR/M(c5)
// 51:                              ret
op(c3)
// 54: .assign.consoleTarget_vtbl_inst:
// 57: .assign.consoleTarget_sctor: 
// 58:                              push, rbp                                          
rex(48)op(ff)modR/M(f5)
// 59:                              mov, rbp, rsp                                      
rex(48)op(89)modR/M(e5)
// 60:                              sub, rsp, 32                                       
rex(48)op(83)modR/M(ec)i8(20)
// 61:                              call, .sht.core.object_sctor                       ; (call label)
op(e8)co32(00-00-00-00)
// 62:                              add, rsp, 32                                       
rex(48)op(81)modR/M(c4)i32(20-00-00-00)
// 63:                              mov, r10, qwordptr .assign.consoleTarget_vtbl_inst ; codeshape decomp
rex(4c)op(8b)modR/M(15)disp32toLabel(00-00-00-00)
// 64:                              mov, [rcx], r10                                    ; =
rex(4c)op(89)modR/M(11)
// 65:                              sub, rsp, 32                                       
rex(48)op(83)modR/M(ec)i8(20)
// 66:                              call, .assign.consoleTarget.cctor                  ; (call label)
op(e8)co32(00-00-00-00)
// 67:                              add, rsp, 32                                       
rex(48)op(81)modR/M(c4)i32(20-00-00-00)
// 68:                              mov, rsp, rbp                                      
rex(48)op(89)modR/M(ec)
// 69:                              pop, rbp                                           
rex(48)op(8f)modR/M(c5)
// 70:                              ret                                                
op(c3)
// 73: .assign.consoleTarget_sdtor: 
// 74:                              push, rbp                                          
rex(48)op(ff)modR/M(f5)
// 75:                              mov, rbp, rsp                                      
rex(48)op(89)modR/M(e5)
// 76:                              mov, r10, qwordptr .assign.consoleTarget_vtbl_inst ; codeshape decomp
rex(4c)op(8b)modR/M(15)disp32toLabel(00-00-00-00)
// 77:                              mov, [rcx], r10                                    ; =
rex(4c)op(89)modR/M(11)
// 78:                              sub, rsp, 32                                       
rex(48)op(83)modR/M(ec)i8(20)
// 79:                              call, .assign.consoleTarget.cdtor                  ; (call label)
op(e8)co32(00-00-00-00)
// 80:                              add, rsp, 32                                       
rex(48)op(81)modR/M(c4)i32(20-00-00-00)
// 81:                              sub, rsp, 32                                       
rex(48)op(83)modR/M(ec)i8(20)
// 82:                              call, .sht.core.object_sdtor                       ; (call label)
op(e8)co32(00-00-00-00)
// 83:                              add, rsp, 32                                       
rex(48)op(81)modR/M(c4)i32(20-00-00-00)
// 84:                              mov, rsp, rbp                                      
rex(48)op(89)modR/M(ec)
// 85:                              pop, rbp                                           
rex(48)op(8f)modR/M(c5)
// 86:                              ret                                                
op(c3)
