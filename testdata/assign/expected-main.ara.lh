class .assign.assignTester {
   _vtbl : .assign.assignTester_vtbl;
   _out : .sht.cons.iStream;
}

class .assign.A {
   _vtbl : .assign.A_vtbl;
   x : void;
   b : .assign.B;
}

class .assign.B {
   _vtbl : .assign.B_vtbl;
   unused : void;
   x : void;
}

func .assign.assignTester.run(
   self : .assign.assignTester,
   args : str[]) : void;

func .assign.assignTester.readFromSubObject(
   self : .assign.assignTester,
   a : .assign.A,
   v : void) : void;

func .assign.assignTester.writeIntoSubObject(
   self : .assign.assignTester) : void;

func .assign.assignTester.readFromSubSubObject(
   self : .assign.assignTester,
   a : .assign.A,
   wrong : void) : void;

func .assign.assignTester.writeIntoSubSubObject(
   self : .assign.assignTester) : void;

func .assign.assignTester.cctor(
   self : .assign.assignTester) : .assign.assignTester;

func .assign.assignTester.cdtor(
   self : .assign.assignTester) : .assign.assignTester;

func .assign.A.cctor(
   self : .assign.A) : .assign.A;

func .assign.A.cdtor(
   self : .assign.A) : .assign.A;

func .assign.B.cctor(
   self : .assign.B) : .assign.B;

func .assign.B.cdtor(
   self : .assign.B) : .assign.B;

class .assign.A_vtbl {
}

class .assign.B_vtbl {
}

class .assign.assignTester_vtbl {
   run : ptr;
}

func .assign.A_sctor(
   self : .assign.A) : void;

func .assign.A_sdtor(
   self : .assign.A) : void;

func .assign.B_sctor(
   self : .assign.B) : void;

func .assign.B_sdtor(
   self : .assign.B) : void;

func .assign.assignTester_sctor(
   self : .assign.assignTester) : void;

func .assign.assignTester_sdtor(
   self : .assign.assignTester) : void;

ref "..\sht\cons\program.ara.lh";
